; Listing generated by Microsoft (R) Optimizing Compiler Version 19.13.26131.1 

	TITLE	C:\Users\smith\Projects\CallCenter\RMOSession.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??6CSysOut@@QAEAAV0@P6AAAV0@AAV0@@Z@Z		; CSysOut::operator<<
PUBLIC	??6CSysOut@@QAEAAV0@D@Z				; CSysOut::operator<<
PUBLIC	?flush@@YAAAVCSysOut@@AAV1@@Z			; flush
PUBLIC	?endl@@YAAAVCSysOut@@AAV1@@Z			; endl
PUBLIC	?c_str@TZSuperShortString@@QBEPBDXZ		; TZSuperShortString::c_str
PUBLIC	??1CRMOStoredData@@QAE@XZ			; CRMOStoredData::~CRMOStoredData
PUBLIC	??0CRMOSession@@QAE@XZ				; CRMOSession::CRMOSession
PUBLIC	??1CRMOSession@@UAE@XZ				; CRMOSession::~CRMOSession
PUBLIC	?ProcessEvent@CRMOSession@@AAEXXZ		; CRMOSession::ProcessEvent
PUBLIC	?ProcessMessage@CRMOSession@@AAE_NAAV?$TFixedSizeBinaryData@$0BAAA@@@@Z ; CRMOSession::ProcessMessage
PUBLIC	?CheckTimeout@CRMOSession@@AAEXXZ		; CRMOSession::CheckTimeout
PUBLIC	?ConnectToNewClient@CRMOSession@@AAEXXZ		; CRMOSession::ConnectToNewClient
PUBLIC	?SendCommand@CRMOSession@@AAEXE@Z		; CRMOSession::SendCommand
PUBLIC	?SendMessageA@CRMOSession@@AAEXPAV?$TFixedSizeBinaryData@$0BAAA@@@@Z ; CRMOSession::SendMessageA
PUBLIC	?__writefrom@?$TFixedSizeBinaryData@$0BAAA@@@AAEXPAXI@Z ; TFixedSizeBinaryData<4096>::__writefrom
PUBLIC	?__readto@?$TFixedSizeBinaryData@$0BAAA@@@AAEXPAXI@Z ; TFixedSizeBinaryData<4096>::__readto
PUBLIC	??0?$TFixedSizeBinaryData@$0BAAA@@@QAE@XZ	; TFixedSizeBinaryData<4096>::TFixedSizeBinaryData<4096>
PUBLIC	??1?$TFixedSizeBinaryData@$0BAAA@@@UAE@XZ	; TFixedSizeBinaryData<4096>::~TFixedSizeBinaryData<4096>
PUBLIC	??B?$TFixedSizeBinaryData@$0BAAA@@@QAEPAXXZ	; TFixedSizeBinaryData<4096>::operator void *
PUBLIC	?Reset@?$TFixedSizeBinaryData@$0BAAA@@@QAEXXZ	; TFixedSizeBinaryData<4096>::Reset
PUBLIC	?GetSize@?$TFixedSizeBinaryData@$0BAAA@@@QAEHXZ	; TFixedSizeBinaryData<4096>::GetSize
PUBLIC	?AdjustSize@?$TFixedSizeBinaryData@$0BAAA@@@QAEXK@Z ; TFixedSizeBinaryData<4096>::AdjustSize
PUBLIC	?CopyUnreadDataFrom@?$TFixedSizeBinaryData@$0BAAA@@@QAEXPAV1@@Z ; TFixedSizeBinaryData<4096>::CopyUnreadDataFrom
PUBLIC	??6?$TFixedSizeBinaryData@$0BAAA@@@QAEAAV0@ABE@Z ; TFixedSizeBinaryData<4096>::operator<<
PUBLIC	??5?$TFixedSizeBinaryData@$0BAAA@@@QAEAAV0@AAE@Z ; TFixedSizeBinaryData<4096>::operator>>
PUBLIC	??5?$TFixedSizeBinaryData@$0BAAA@@@QAEAAV0@AAI@Z ; TFixedSizeBinaryData<4096>::operator>>
PUBLIC	?ReadDataTo@?$TFixedSizeBinaryData@$0BAAA@@@QAEXPAXI@Z ; TFixedSizeBinaryData<4096>::ReadDataTo
PUBLIC	??_G?$TFixedSizeBinaryData@$0BAAA@@@UAEPAXI@Z	; TFixedSizeBinaryData<4096>::`scalar deleting destructor'
PUBLIC	?IsEmpty@?$TCSPtrQueue@V?$TFixedSizeBinaryData@$0BAAA@@@@@QAE_NXZ ; TCSPtrQueue<TFixedSizeBinaryData<4096> >::IsEmpty
PUBLIC	?Push@?$TCSPtrQueue@V?$TFixedSizeBinaryData@$0BAAA@@@@@QAEXPAV?$TFixedSizeBinaryData@$0BAAA@@@@Z ; TCSPtrQueue<TFixedSizeBinaryData<4096> >::Push
PUBLIC	?Pop@?$TCSPtrQueue@V?$TFixedSizeBinaryData@$0BAAA@@@@@QAEPAV?$TFixedSizeBinaryData@$0BAAA@@@XZ ; TCSPtrQueue<TFixedSizeBinaryData<4096> >::Pop
PUBLIC	?Reset@?$TCSPtrQueue@V?$TFixedSizeBinaryData@$0BAAA@@@@@QAEXXZ ; TCSPtrQueue<TFixedSizeBinaryData<4096> >::Reset
PUBLIC	??0?$TCSPtrQueue@V?$TFixedSizeBinaryData@$0BAAA@@@@@QAE@XZ ; TCSPtrQueue<TFixedSizeBinaryData<4096> >::TCSPtrQueue<TFixedSizeBinaryData<4096> >
PUBLIC	??1?$TCSPtrQueue@V?$TFixedSizeBinaryData@$0BAAA@@@@@QAE@XZ ; TCSPtrQueue<TFixedSizeBinaryData<4096> >::~TCSPtrQueue<TFixedSizeBinaryData<4096> >
PUBLIC	??_GCRMOSession@@UAEPAXI@Z			; CRMOSession::`scalar deleting destructor'
PUBLIC	??$?5$0BAAA@@@YAAAV?$TFixedSizeBinaryData@$0BAAA@@@AAV0@AAVTZSuperShortString@@@Z ; operator>><4096>
PUBLIC	??_7?$TFixedSizeBinaryData@$0BAAA@@@6B@		; TFixedSizeBinaryData<4096>::`vftable'
PUBLIC	??_7CRMOSession@@6B@				; CRMOSession::`vftable'
PUBLIC	__TI1?AVEEndOfSession@CRMOSession@@
PUBLIC	__CTA1?AVEEndOfSession@CRMOSession@@
PUBLIC	??_R0?AVEEndOfSession@CRMOSession@@@8		; CRMOSession::EEndOfSession `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVEEndOfSession@CRMOSession@@@81
PUBLIC	??_C@_0P@BFINMMDK@Error?5on?5pipe?5?$AA@	; `string'
PUBLIC	??_C@_01CLKCMJKC@?5?$AA@			; `string'
PUBLIC	??_C@_06BCABIKMC@INST?$CD?5?$AA@		; `string'
PUBLIC	??_C@_0BF@GIOFFIBC@?5Pressed?5Scroll?5Lock?$AA@	; `string'
PUBLIC	??_C@_0P@FHCAOLKP@?5Break?5pressed?$AA@		; `string'
PUBLIC	??_C@_0BJ@NOAJEKEG@Connection?5request?5from?5?$AA@ ; `string'
PUBLIC	__TI2?AVENoDataForRead@?$TFixedSizeBinaryData@$0BAAA@@@
PUBLIC	__CTA2?AVENoDataForRead@?$TFixedSizeBinaryData@$0BAAA@@@
PUBLIC	??_R0?AVENoDataForRead@?$TFixedSizeBinaryData@$0BAAA@@@@8 ; TFixedSizeBinaryData<4096>::ENoDataForRead `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVENoDataForRead@?$TFixedSizeBinaryData@$0BAAA@@@@81
PUBLIC	??_R0?AVEFSBDException@?$TFixedSizeBinaryData@$0BAAA@@@@8 ; TFixedSizeBinaryData<4096>::EFSBDException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVEFSBDException@?$TFixedSizeBinaryData@$0BAAA@@@@81
PUBLIC	__TI2?AVEObjectTooLong@?$TFixedSizeBinaryData@$0BAAA@@@
PUBLIC	__CTA2?AVEObjectTooLong@?$TFixedSizeBinaryData@$0BAAA@@@
PUBLIC	??_R0?AVEObjectTooLong@?$TFixedSizeBinaryData@$0BAAA@@@@8 ; TFixedSizeBinaryData<4096>::EObjectTooLong `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVEObjectTooLong@?$TFixedSizeBinaryData@$0BAAA@@@@81
PUBLIC	??_R4?$TFixedSizeBinaryData@$0BAAA@@@6B@	; TFixedSizeBinaryData<4096>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$TFixedSizeBinaryData@$0BAAA@@@@8	; TFixedSizeBinaryData<4096> `RTTI Type Descriptor'
PUBLIC	??_R3?$TFixedSizeBinaryData@$0BAAA@@@8		; TFixedSizeBinaryData<4096>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$TFixedSizeBinaryData@$0BAAA@@@8		; TFixedSizeBinaryData<4096>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$TFixedSizeBinaryData@$0BAAA@@@8	; TFixedSizeBinaryData<4096>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CRMOSession@@6B@				; CRMOSession::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCRMOSession@@@8				; CRMOSession `RTTI Type Descriptor'
PUBLIC	??_R3CRMOSession@@8				; CRMOSession::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CRMOSession@@8				; CRMOSession::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CRMOSession@@8			; CRMOSession::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@CSystemObject@@8			; CSystemObject::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVCSystemObject@@@8			; CSystemObject `RTTI Type Descriptor'
PUBLIC	??_R3CSystemObject@@8				; CSystemObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSystemObject@@8				; CSystemObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSystemObject@@8			; CSystemObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@CRMOStoredData@@8			; CRMOStoredData::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVCRMOStoredData@@@8			; CRMOStoredData `RTTI Type Descriptor'
PUBLIC	??_R3CRMOStoredData@@8				; CRMOStoredData::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CRMOStoredData@@8				; CRMOStoredData::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CRMOStoredData@@8			; CRMOStoredData::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	__imp__ReadFile@20:PROC
EXTRN	__imp__WriteFile@20:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__SetLastError@4:PROC
EXTRN	__imp__ConnectNamedPipe@8:PROC
EXTRN	__imp__DisconnectNamedPipe@4:PROC
EXTRN	__imp__GetOverlappedResult@16:PROC
EXTRN	__imp__CancelIo@4:PROC
EXTRN	__imp__InitializeCriticalSection@4:PROC
EXTRN	__imp__EnterCriticalSection@4:PROC
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	__imp__DeleteCriticalSection@4:PROC
EXTRN	__imp__SetEvent@4:PROC
EXTRN	__imp__CreateEventA@16:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	?flush@CSysOut@@QAEAAV1@XZ:PROC			; CSysOut::flush
EXTRN	??6CSysOut@@QAEAAV0@PBD@Z:PROC			; CSysOut::operator<<
EXTRN	??6CSysOut@@QAEAAV0@E@Z:PROC			; CSysOut::operator<<
EXTRN	??6CSysOut@@QAEAAV0@I@Z:PROC			; CSysOut::operator<<
EXTRN	??6CSysOut@@QAEAAV0@K@Z:PROC			; CSysOut::operator<<
EXTRN	?time@@YAAAVCSysOut@@AAV1@@Z:PROC		; time
EXTRN	??1TZSuperShortString@@QAE@XZ:PROC		; TZSuperShortString::~TZSuperShortString
EXTRN	?set_length@TZSuperShortString@@QAEEE@Z:PROC	; TZSuperShortString::set_length
EXTRN	??0TUIList@@QAE@XZ:PROC				; TUIList::TUIList
EXTRN	??1TUIList@@QAE@XZ:PROC				; TUIList::~TUIList
EXTRN	?GetSize@TUIList@@QBEIXZ:PROC			; TUIList::GetSize
EXTRN	?Reset@TUIList@@QAEXXZ:PROC			; TUIList::Reset
EXTRN	?Add@TUIList@@QAE_NI@Z:PROC			; TUIList::Add
EXTRN	?Delete@TUIList@@QAE_NI@Z:PROC			; TUIList::Delete
EXTRN	??ATUIList@@QAEAAII@Z:PROC			; TUIList::operator[]
EXTRN	?PostSysMessage@CSystemObject@@IAEXEEGI@Z:PROC	; CSystemObject::PostSysMessage
EXTRN	??0CRMOStoredData@@QAE@XZ:PROC			; CRMOStoredData::CRMOStoredData
EXTRN	?Reset@CRMOStoredData@@QAEXXZ:PROC		; CRMOStoredData::Reset
EXTRN	??_E?$TFixedSizeBinaryData@$0BAAA@@@UAEPAXI@Z:PROC ; TFixedSizeBinaryData<4096>::`vector deleting destructor'
EXTRN	??_ECRMOSession@@UAEPAXI@Z:PROC			; CRMOSession::`vector deleting destructor'
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?FLOG@@3VCSysOut@@A:BYTE			; FLOG
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@CRMOStoredData@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CRMOStoredData@@8 DD FLAT:??_R0?AVCRMOStoredData@@@8 ; CRMOStoredData::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CRMOStoredData@@8
rdata$r	ENDS
;	COMDAT ??_R2CRMOStoredData@@8
rdata$r	SEGMENT
??_R2CRMOStoredData@@8 DD FLAT:??_R1A@?0A@EA@CRMOStoredData@@8 ; CRMOStoredData::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CRMOStoredData@@8
rdata$r	SEGMENT
??_R3CRMOStoredData@@8 DD 00H				; CRMOStoredData::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CRMOStoredData@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCRMOStoredData@@@8
data$r	SEGMENT
??_R0?AVCRMOStoredData@@@8 DD FLAT:??_7type_info@@6B@	; CRMOStoredData `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCRMOStoredData@@', 00H
data$r	ENDS
;	COMDAT ??_R13?0A@EA@CRMOStoredData@@8
rdata$r	SEGMENT
??_R13?0A@EA@CRMOStoredData@@8 DD FLAT:??_R0?AVCRMOStoredData@@@8 ; CRMOStoredData::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CRMOStoredData@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CSystemObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSystemObject@@8 DD FLAT:??_R0?AVCSystemObject@@@8 ; CSystemObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSystemObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CSystemObject@@8
rdata$r	SEGMENT
??_R2CSystemObject@@8 DD FLAT:??_R1A@?0A@EA@CSystemObject@@8 ; CSystemObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CSystemObject@@8
rdata$r	SEGMENT
??_R3CSystemObject@@8 DD 00H				; CSystemObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CSystemObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSystemObject@@@8
data$r	SEGMENT
??_R0?AVCSystemObject@@@8 DD FLAT:??_7type_info@@6B@	; CSystemObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSystemObject@@', 00H
data$r	ENDS
;	COMDAT ??_R13?0A@EA@CSystemObject@@8
rdata$r	SEGMENT
??_R13?0A@EA@CSystemObject@@8 DD FLAT:??_R0?AVCSystemObject@@@8 ; CSystemObject::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSystemObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CRMOSession@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CRMOSession@@8 DD FLAT:??_R0?AVCRMOSession@@@8 ; CRMOSession::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CRMOSession@@8
rdata$r	ENDS
;	COMDAT ??_R2CRMOSession@@8
rdata$r	SEGMENT
??_R2CRMOSession@@8 DD FLAT:??_R1A@?0A@EA@CRMOSession@@8 ; CRMOSession::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@CSystemObject@@8
	DD	FLAT:??_R13?0A@EA@CRMOStoredData@@8
rdata$r	ENDS
;	COMDAT ??_R3CRMOSession@@8
rdata$r	SEGMENT
??_R3CRMOSession@@8 DD 00H				; CRMOSession::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	FLAT:??_R2CRMOSession@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCRMOSession@@@8
data$r	SEGMENT
??_R0?AVCRMOSession@@@8 DD FLAT:??_7type_info@@6B@	; CRMOSession `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCRMOSession@@', 00H
data$r	ENDS
;	COMDAT ??_R4CRMOSession@@6B@
rdata$r	SEGMENT
??_R4CRMOSession@@6B@ DD 00H				; CRMOSession::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCRMOSession@@@8
	DD	FLAT:??_R3CRMOSession@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$TFixedSizeBinaryData@$0BAAA@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$TFixedSizeBinaryData@$0BAAA@@@8 DD FLAT:??_R0?AV?$TFixedSizeBinaryData@$0BAAA@@@@8 ; TFixedSizeBinaryData<4096>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$TFixedSizeBinaryData@$0BAAA@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$TFixedSizeBinaryData@$0BAAA@@@8
rdata$r	SEGMENT
??_R2?$TFixedSizeBinaryData@$0BAAA@@@8 DD FLAT:??_R1A@?0A@EA@?$TFixedSizeBinaryData@$0BAAA@@@8 ; TFixedSizeBinaryData<4096>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$TFixedSizeBinaryData@$0BAAA@@@8
rdata$r	SEGMENT
??_R3?$TFixedSizeBinaryData@$0BAAA@@@8 DD 00H		; TFixedSizeBinaryData<4096>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$TFixedSizeBinaryData@$0BAAA@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$TFixedSizeBinaryData@$0BAAA@@@@8
data$r	SEGMENT
??_R0?AV?$TFixedSizeBinaryData@$0BAAA@@@@8 DD FLAT:??_7type_info@@6B@ ; TFixedSizeBinaryData<4096> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$TFixedSizeBinaryData@$0BAAA@@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$TFixedSizeBinaryData@$0BAAA@@@6B@
rdata$r	SEGMENT
??_R4?$TFixedSizeBinaryData@$0BAAA@@@6B@ DD 00H		; TFixedSizeBinaryData<4096>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$TFixedSizeBinaryData@$0BAAA@@@@8
	DD	FLAT:??_R3?$TFixedSizeBinaryData@$0BAAA@@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVEObjectTooLong@?$TFixedSizeBinaryData@$0BAAA@@@@81
xdata$x	SEGMENT
__CT??_R0?AVEObjectTooLong@?$TFixedSizeBinaryData@$0BAAA@@@@81 DD 00H
	DD	FLAT:??_R0?AVEObjectTooLong@?$TFixedSizeBinaryData@$0BAAA@@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	01H
	DD	00H
xdata$x	ENDS
;	COMDAT ??_R0?AVEObjectTooLong@?$TFixedSizeBinaryData@$0BAAA@@@@8
data$r	SEGMENT
??_R0?AVEObjectTooLong@?$TFixedSizeBinaryData@$0BAAA@@@@8 DD FLAT:??_7type_info@@6B@ ; TFixedSizeBinaryData<4096>::EObjectTooLong `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVEObjectTooLong@?$TFixedSizeBinaryData@$0BAAA@@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVEObjectTooLong@?$TFixedSizeBinaryData@$0BAAA@@@
xdata$x	SEGMENT
__CTA2?AVEObjectTooLong@?$TFixedSizeBinaryData@$0BAAA@@@ DD 02H
	DD	FLAT:__CT??_R0?AVEObjectTooLong@?$TFixedSizeBinaryData@$0BAAA@@@@81
	DD	FLAT:__CT??_R0?AVEFSBDException@?$TFixedSizeBinaryData@$0BAAA@@@@81
xdata$x	ENDS
;	COMDAT __TI2?AVEObjectTooLong@?$TFixedSizeBinaryData@$0BAAA@@@
xdata$x	SEGMENT
__TI2?AVEObjectTooLong@?$TFixedSizeBinaryData@$0BAAA@@@ DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA2?AVEObjectTooLong@?$TFixedSizeBinaryData@$0BAAA@@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVEFSBDException@?$TFixedSizeBinaryData@$0BAAA@@@@81
xdata$x	SEGMENT
__CT??_R0?AVEFSBDException@?$TFixedSizeBinaryData@$0BAAA@@@@81 DD 00H
	DD	FLAT:??_R0?AVEFSBDException@?$TFixedSizeBinaryData@$0BAAA@@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	01H
	DD	00H
xdata$x	ENDS
;	COMDAT ??_R0?AVEFSBDException@?$TFixedSizeBinaryData@$0BAAA@@@@8
data$r	SEGMENT
??_R0?AVEFSBDException@?$TFixedSizeBinaryData@$0BAAA@@@@8 DD FLAT:??_7type_info@@6B@ ; TFixedSizeBinaryData<4096>::EFSBDException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVEFSBDException@?$TFixedSizeBinaryData@$0BAAA@@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVENoDataForRead@?$TFixedSizeBinaryData@$0BAAA@@@@81
xdata$x	SEGMENT
__CT??_R0?AVENoDataForRead@?$TFixedSizeBinaryData@$0BAAA@@@@81 DD 00H
	DD	FLAT:??_R0?AVENoDataForRead@?$TFixedSizeBinaryData@$0BAAA@@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	01H
	DD	00H
xdata$x	ENDS
;	COMDAT ??_R0?AVENoDataForRead@?$TFixedSizeBinaryData@$0BAAA@@@@8
data$r	SEGMENT
??_R0?AVENoDataForRead@?$TFixedSizeBinaryData@$0BAAA@@@@8 DD FLAT:??_7type_info@@6B@ ; TFixedSizeBinaryData<4096>::ENoDataForRead `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVENoDataForRead@?$TFixedSizeBinaryData@$0BAAA@@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVENoDataForRead@?$TFixedSizeBinaryData@$0BAAA@@@
xdata$x	SEGMENT
__CTA2?AVENoDataForRead@?$TFixedSizeBinaryData@$0BAAA@@@ DD 02H
	DD	FLAT:__CT??_R0?AVENoDataForRead@?$TFixedSizeBinaryData@$0BAAA@@@@81
	DD	FLAT:__CT??_R0?AVEFSBDException@?$TFixedSizeBinaryData@$0BAAA@@@@81
xdata$x	ENDS
;	COMDAT __TI2?AVENoDataForRead@?$TFixedSizeBinaryData@$0BAAA@@@
xdata$x	SEGMENT
__TI2?AVENoDataForRead@?$TFixedSizeBinaryData@$0BAAA@@@ DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA2?AVENoDataForRead@?$TFixedSizeBinaryData@$0BAAA@@@
xdata$x	ENDS
;	COMDAT ??_C@_0BJ@NOAJEKEG@Connection?5request?5from?5?$AA@
CONST	SEGMENT
??_C@_0BJ@NOAJEKEG@Connection?5request?5from?5?$AA@ DB 'Connection reques'
	DB	't from ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FHCAOLKP@?5Break?5pressed?$AA@
CONST	SEGMENT
??_C@_0P@FHCAOLKP@?5Break?5pressed?$AA@ DB ' Break pressed', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GIOFFIBC@?5Pressed?5Scroll?5Lock?$AA@
CONST	SEGMENT
??_C@_0BF@GIOFFIBC@?5Pressed?5Scroll?5Lock?$AA@ DB ' Pressed Scroll Lock', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06BCABIKMC@INST?$CD?5?$AA@
CONST	SEGMENT
??_C@_06BCABIKMC@INST?$CD?5?$AA@ DB 'INST# ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5?$AA@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5?$AA@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BFINMMDK@Error?5on?5pipe?5?$AA@
CONST	SEGMENT
??_C@_0P@BFINMMDK@Error?5on?5pipe?5?$AA@ DB 'Error on pipe ', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVEEndOfSession@CRMOSession@@@81
xdata$x	SEGMENT
__CT??_R0?AVEEndOfSession@CRMOSession@@@81 DD 00H
	DD	FLAT:??_R0?AVEEndOfSession@CRMOSession@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	01H
	DD	00H
xdata$x	ENDS
;	COMDAT ??_R0?AVEEndOfSession@CRMOSession@@@8
data$r	SEGMENT
??_R0?AVEEndOfSession@CRMOSession@@@8 DD FLAT:??_7type_info@@6B@ ; CRMOSession::EEndOfSession `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVEEndOfSession@CRMOSession@@', 00H
data$r	ENDS
;	COMDAT __CTA1?AVEEndOfSession@CRMOSession@@
xdata$x	SEGMENT
__CTA1?AVEEndOfSession@CRMOSession@@ DD 01H
	DD	FLAT:__CT??_R0?AVEEndOfSession@CRMOSession@@@81
xdata$x	ENDS
;	COMDAT __TI1?AVEEndOfSession@CRMOSession@@
xdata$x	SEGMENT
__TI1?AVEEndOfSession@CRMOSession@@ DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA1?AVEEndOfSession@CRMOSession@@
xdata$x	ENDS
;	COMDAT ??_7CRMOSession@@6B@
CONST	SEGMENT
??_7CRMOSession@@6B@ DD FLAT:??_R4CRMOSession@@6B@	; CRMOSession::`vftable'
	DD	FLAT:??_ECRMOSession@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$TFixedSizeBinaryData@$0BAAA@@@6B@
CONST	SEGMENT
??_7?$TFixedSizeBinaryData@$0BAAA@@@6B@ DD FLAT:??_R4?$TFixedSizeBinaryData@$0BAAA@@@6B@ ; TFixedSizeBinaryData<4096>::`vftable'
	DD	FLAT:??_E?$TFixedSizeBinaryData@$0BAAA@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$TCSPtrQueue@V?$TFixedSizeBinaryData@$0BAAA@@@@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SendCommand@CRMOSession@@AAEXE@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SendCommand@CRMOSession@@AAEXE@Z$0
__ehfuncinfo$?SendCommand@CRMOSession@@AAEXE@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SendCommand@CRMOSession@@AAEXE@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ProcessMessage@CRMOSession@@AAE_NAAV?$TFixedSizeBinaryData@$0BAAA@@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessMessage@CRMOSession@@AAE_NAAV?$TFixedSizeBinaryData@$0BAAA@@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessMessage@CRMOSession@@AAE_NAAV?$TFixedSizeBinaryData@$0BAAA@@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessMessage@CRMOSession@@AAE_NAAV?$TFixedSizeBinaryData@$0BAAA@@@@Z$2
__ehfuncinfo$?ProcessMessage@CRMOSession@@AAE_NAAV?$TFixedSizeBinaryData@$0BAAA@@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?ProcessMessage@CRMOSession@@AAE_NAAV?$TFixedSizeBinaryData@$0BAAA@@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?ProcessEvent@CRMOSession@@AAEXXZ$2 DD 00H
	DD	FLAT:??_R0?AVEEndOfSession@CRMOSession@@@8
	DD	00H
	DD	FLAT:__catch$?ProcessEvent@CRMOSession@@AAEXXZ$0
__unwindtable$?ProcessEvent@CRMOSession@@AAEXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?ProcessEvent@CRMOSession@@AAEXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?ProcessEvent@CRMOSession@@AAEXXZ$2
__ehfuncinfo$?ProcessEvent@CRMOSession@@AAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ProcessEvent@CRMOSession@@AAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?ProcessEvent@CRMOSession@@AAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CRMOSession@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CRMOSession@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CRMOSession@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CRMOSession@@QAE@XZ$1
__ehfuncinfo$??0CRMOSession@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CRMOSession@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tzssstring.h
;	COMDAT ??$?5$0BAAA@@@YAAAV?$TFixedSizeBinaryData@$0BAAA@@@AAV0@AAVTZSuperShortString@@@Z
_TEXT	SEGMENT
_size$ = -5						; size = 1
_s$ = 8							; size = 4
_Value$ = 12						; size = 4
??$?5$0BAAA@@@YAAAV?$TFixedSizeBinaryData@$0BAAA@@@AAV0@AAVTZSuperShortString@@@Z PROC ; operator>><4096>, COMDAT

; 76   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 77   : unsigned __int8 size;
; 78   : 	s.ReadDataTo((void *)&size, sizeof(size));

	push	1
	lea	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	call	?ReadDataTo@?$TFixedSizeBinaryData@$0BAAA@@@QAEXPAXI@Z ; TFixedSizeBinaryData<4096>::ReadDataTo

; 79   : 	Value.set_length(size);

	movzx	eax, BYTE PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Value$[ebp]
	call	?set_length@TZSuperShortString@@QAEEE@Z	; TZSuperShortString::set_length

; 80   : 	s.ReadDataTo((void *)Value.c_str(), size);

	movzx	eax, BYTE PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Value$[ebp]
	call	?c_str@TZSuperShortString@@QBEPBDXZ	; TZSuperShortString::c_str
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	call	?ReadDataTo@?$TFixedSizeBinaryData@$0BAAA@@@QAEXPAXI@Z ; TFixedSizeBinaryData<4096>::ReadDataTo

; 81   : 	return s;

	mov	eax, DWORD PTR _s$[ebp]

; 82   : };

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@operator:
	DD	1
	DD	$LN4@operator
$LN4@operator:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@operator
$LN3@operator:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
??$?5$0BAAA@@@YAAAV?$TFixedSizeBinaryData@$0BAAA@@@AAV0@AAVTZSuperShortString@@@Z ENDP ; operator>><4096>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCRMOSession@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCRMOSession@@UAEPAXI@Z PROC				; CRMOSession::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CRMOSession@@UAE@XZ			; CRMOSession::~CRMOSession
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	4268					; 000010acH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCRMOSession@@UAEPAXI@Z ENDP				; CRMOSession::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.h
;	COMDAT ??1?$TCSPtrQueue@V?$TFixedSizeBinaryData@$0BAAA@@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$TCSPtrQueue@V?$TFixedSizeBinaryData@$0BAAA@@@@@QAE@XZ PROC ; TCSPtrQueue<TFixedSizeBinaryData<4096> >::~TCSPtrQueue<TFixedSizeBinaryData<4096> >, COMDAT
; _this$ = ecx

; 155  : 	~TCSPtrQueue() { Reset(); DeleteCriticalSection(&CS); };

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$TCSPtrQueue@V?$TFixedSizeBinaryData@$0BAAA@@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@?$TCSPtrQueue@V?$TFixedSizeBinaryData@$0BAAA@@@@@QAEXXZ ; TCSPtrQueue<TFixedSizeBinaryData<4096> >::Reset
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__DeleteCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TUIList@@QAE@XZ			; TUIList::~TUIList
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$TCSPtrQueue@V?$TFixedSizeBinaryData@$0BAAA@@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$TCSPtrQueue@V?$TFixedSizeBinaryData@$0BAAA@@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$TCSPtrQueue@V?$TFixedSizeBinaryData@$0BAAA@@@@@QAE@XZ ENDP ; TCSPtrQueue<TFixedSizeBinaryData<4096> >::~TCSPtrQueue<TFixedSizeBinaryData<4096> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.h
;	COMDAT ??0?$TCSPtrQueue@V?$TFixedSizeBinaryData@$0BAAA@@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$TCSPtrQueue@V?$TFixedSizeBinaryData@$0BAAA@@@@@QAE@XZ PROC ; TCSPtrQueue<TFixedSizeBinaryData<4096> >::TCSPtrQueue<TFixedSizeBinaryData<4096> >, COMDAT
; _this$ = ecx

; 154  : 	TCSPtrQueue() { InitializeCriticalSection(&CS); };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0TUIList@@QAE@XZ			; TUIList::TUIList
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__InitializeCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$TCSPtrQueue@V?$TFixedSizeBinaryData@$0BAAA@@@@@QAE@XZ ENDP ; TCSPtrQueue<TFixedSizeBinaryData<4096> >::TCSPtrQueue<TFixedSizeBinaryData<4096> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.h
;	COMDAT ?Reset@?$TCSPtrQueue@V?$TFixedSizeBinaryData@$0BAAA@@@@@QAEXXZ
_TEXT	SEGMENT
tv87 = -244						; size = 4
$T1 = -236						; size = 4
$T2 = -224						; size = 4
_i$3 = -20						; size = 4
_this$ = -8						; size = 4
?Reset@?$TCSPtrQueue@V?$TFixedSizeBinaryData@$0BAAA@@@@@QAEXXZ PROC ; TCSPtrQueue<TFixedSizeBinaryData<4096> >::Reset, COMDAT
; _this$ = ecx

; 152  : 	void Reset(void) { EnterCriticalSection(&CS); for(unsigned i=0; i<TUIList::GetSize(); i++) delete (Type*)TUIList::operator[](i); TUIList::Reset(); LeaveCriticalSection(&CS);};

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN4@Reset
$LN2@Reset:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN4@Reset:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSize@TUIList@@QBEIXZ		; TUIList::GetSize
	cmp	DWORD PTR _i$3[ebp], eax
	jae	SHORT $LN3@Reset
	mov	eax, DWORD PTR _i$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ATUIList@@QAEAAII@Z			; TUIList::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T2[ebp], edx
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN6@Reset
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T2[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv87[ebp], eax
	jmp	SHORT $LN7@Reset
$LN6@Reset:
	mov	DWORD PTR tv87[ebp], 0
$LN7@Reset:
	jmp	SHORT $LN2@Reset
$LN3@Reset:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@TUIList@@QAEXXZ			; TUIList::Reset
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@?$TCSPtrQueue@V?$TFixedSizeBinaryData@$0BAAA@@@@@QAEXXZ ENDP ; TCSPtrQueue<TFixedSizeBinaryData<4096> >::Reset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.h
;	COMDAT ?Pop@?$TCSPtrQueue@V?$TFixedSizeBinaryData@$0BAAA@@@@@QAEPAV?$TFixedSizeBinaryData@$0BAAA@@@XZ
_TEXT	SEGMENT
_ret$ = -20						; size = 4
_this$ = -8						; size = 4
?Pop@?$TCSPtrQueue@V?$TFixedSizeBinaryData@$0BAAA@@@@@QAEPAV?$TFixedSizeBinaryData@$0BAAA@@@XZ PROC ; TCSPtrQueue<TFixedSizeBinaryData<4096> >::Pop, COMDAT
; _this$ = ecx

; 150  : 	Type *Pop(void) { if (IsEmpty()) return NULL; EnterCriticalSection(&CS); Type *ret=(Type*)TUIList::operator[](0); TUIList::Delete(0); LeaveCriticalSection(&CS); return ret; };

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmpty@?$TCSPtrQueue@V?$TFixedSizeBinaryData@$0BAAA@@@@@QAE_NXZ ; TCSPtrQueue<TFixedSizeBinaryData<4096> >::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@Pop
	xor	eax, eax
	jmp	SHORT $LN1@Pop
$LN2@Pop:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ATUIList@@QAEAAII@Z			; TUIList::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _ret$[ebp], eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Delete@TUIList@@QAE_NI@Z		; TUIList::Delete
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _ret$[ebp]
$LN1@Pop:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Pop@?$TCSPtrQueue@V?$TFixedSizeBinaryData@$0BAAA@@@@@QAEPAV?$TFixedSizeBinaryData@$0BAAA@@@XZ ENDP ; TCSPtrQueue<TFixedSizeBinaryData<4096> >::Pop
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.h
;	COMDAT ?Push@?$TCSPtrQueue@V?$TFixedSizeBinaryData@$0BAAA@@@@@QAEXPAV?$TFixedSizeBinaryData@$0BAAA@@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_data$ = 8						; size = 4
?Push@?$TCSPtrQueue@V?$TFixedSizeBinaryData@$0BAAA@@@@@QAEXPAV?$TFixedSizeBinaryData@$0BAAA@@@@Z PROC ; TCSPtrQueue<TFixedSizeBinaryData<4096> >::Push, COMDAT
; _this$ = ecx

; 149  : 	void Push(Type *data) { EnterCriticalSection(&CS); TUIList::Add((unsigned __int32)data); LeaveCriticalSection(&CS);};

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@TUIList@@QAE_NI@Z			; TUIList::Add
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Push@?$TCSPtrQueue@V?$TFixedSizeBinaryData@$0BAAA@@@@@QAEXPAV?$TFixedSizeBinaryData@$0BAAA@@@@Z ENDP ; TCSPtrQueue<TFixedSizeBinaryData<4096> >::Push
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.h
;	COMDAT ?IsEmpty@?$TCSPtrQueue@V?$TFixedSizeBinaryData@$0BAAA@@@@@QAE_NXZ
_TEXT	SEGMENT
tv73 = -220						; size = 4
_ret$ = -17						; size = 1
_this$ = -8						; size = 4
?IsEmpty@?$TCSPtrQueue@V?$TFixedSizeBinaryData@$0BAAA@@@@@QAE_NXZ PROC ; TCSPtrQueue<TFixedSizeBinaryData<4096> >::IsEmpty, COMDAT
; _this$ = ecx

; 148  : 	bool IsEmpty(void) { bool ret; EnterCriticalSection(&CS); ret = (TUIList::GetSize()==0); LeaveCriticalSection(&CS);return ret;};

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSize@TUIList@@QBEIXZ		; TUIList::GetSize
	test	eax, eax
	jne	SHORT $LN3@IsEmpty
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN4@IsEmpty
$LN3@IsEmpty:
	mov	DWORD PTR tv73[ebp], 0
$LN4@IsEmpty:
	mov	al, BYTE PTR tv73[ebp]
	mov	BYTE PTR _ret$[ebp], al
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	al, BYTE PTR _ret$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$TCSPtrQueue@V?$TFixedSizeBinaryData@$0BAAA@@@@@QAE_NXZ ENDP ; TCSPtrQueue<TFixedSizeBinaryData<4096> >::IsEmpty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G?$TFixedSizeBinaryData@$0BAAA@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G?$TFixedSizeBinaryData@$0BAAA@@@UAEPAXI@Z PROC	; TFixedSizeBinaryData<4096>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$TFixedSizeBinaryData@$0BAAA@@@UAE@XZ ; TFixedSizeBinaryData<4096>::~TFixedSizeBinaryData<4096>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	4108					; 0000100cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$TFixedSizeBinaryData@$0BAAA@@@UAEPAXI@Z ENDP	; TFixedSizeBinaryData<4096>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tfixedsizebinarydata.hxx
;	COMDAT ?ReadDataTo@?$TFixedSizeBinaryData@$0BAAA@@@QAEXPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_ptr$ = 8						; size = 4
_sz$ = 12						; size = 4
?ReadDataTo@?$TFixedSizeBinaryData@$0BAAA@@@QAEXPAXI@Z PROC ; TFixedSizeBinaryData<4096>::ReadDataTo, COMDAT
; _this$ = ecx

; 83   : 	void ReadDataTo(void *ptr, unsigned __int32 sz) { __readto(ptr, sz); };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _sz$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?__readto@?$TFixedSizeBinaryData@$0BAAA@@@AAEXPAXI@Z ; TFixedSizeBinaryData<4096>::__readto
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ReadDataTo@?$TFixedSizeBinaryData@$0BAAA@@@QAEXPAXI@Z ENDP ; TFixedSizeBinaryData<4096>::ReadDataTo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tfixedsizebinarydata.hxx
;	COMDAT ??5?$TFixedSizeBinaryData@$0BAAA@@@QAEAAV0@AAI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_Value$ = 8						; size = 4
??5?$TFixedSizeBinaryData@$0BAAA@@@QAEAAV0@AAI@Z PROC	; TFixedSizeBinaryData<4096>::operator>>, COMDAT
; _this$ = ecx

; 70   : 	TFSBD_OPERATORRSH(unsigned int);

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	mov	eax, DWORD PTR _Value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?__readto@?$TFixedSizeBinaryData@$0BAAA@@@AAEXPAXI@Z ; TFixedSizeBinaryData<4096>::__readto
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??5?$TFixedSizeBinaryData@$0BAAA@@@QAEAAV0@AAI@Z ENDP	; TFixedSizeBinaryData<4096>::operator>>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tfixedsizebinarydata.hxx
;	COMDAT ??5?$TFixedSizeBinaryData@$0BAAA@@@QAEAAV0@AAE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_Value$ = 8						; size = 4
??5?$TFixedSizeBinaryData@$0BAAA@@@QAEAAV0@AAE@Z PROC	; TFixedSizeBinaryData<4096>::operator>>, COMDAT
; _this$ = ecx

; 68   : 	TFSBD_OPERATORRSH(unsigned char);

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	eax, DWORD PTR _Value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?__readto@?$TFixedSizeBinaryData@$0BAAA@@@AAEXPAXI@Z ; TFixedSizeBinaryData<4096>::__readto
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??5?$TFixedSizeBinaryData@$0BAAA@@@QAEAAV0@AAE@Z ENDP	; TFixedSizeBinaryData<4096>::operator>>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tfixedsizebinarydata.hxx
;	COMDAT ??6?$TFixedSizeBinaryData@$0BAAA@@@QAEAAV0@ABE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_Value$ = 8						; size = 4
??6?$TFixedSizeBinaryData@$0BAAA@@@QAEAAV0@ABE@Z PROC	; TFixedSizeBinaryData<4096>::operator<<, COMDAT
; _this$ = ecx

; 52   : 	TFSBD_OPERATORLSH(const unsigned char);

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	eax, DWORD PTR _Value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?__writefrom@?$TFixedSizeBinaryData@$0BAAA@@@AAEXPAXI@Z ; TFixedSizeBinaryData<4096>::__writefrom
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??6?$TFixedSizeBinaryData@$0BAAA@@@QAEAAV0@ABE@Z ENDP	; TFixedSizeBinaryData<4096>::operator<<
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tfixedsizebinarydata.hxx
;	COMDAT ?CopyUnreadDataFrom@?$TFixedSizeBinaryData@$0BAAA@@@QAEXPAV1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_TND$ = 8						; size = 4
?CopyUnreadDataFrom@?$TFixedSizeBinaryData@$0BAAA@@@QAEXPAV1@@Z PROC ; TFixedSizeBinaryData<4096>::CopyUnreadDataFrom, COMDAT
; _this$ = ecx

; 45   : 	inline void CopyUnreadDataFrom(TFixedSizeBinaryData *TND) { size=TND->size-TND->curpos; memcpy(data, &(TND->data[TND->curpos]), size); };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _TND$[ebp]
	mov	ecx, DWORD PTR _TND$[ebp]
	mov	edx, DWORD PTR [eax+4104]
	sub	edx, DWORD PTR [ecx+4100]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4104], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4104]
	push	ecx
	mov	edx, DWORD PTR _TND$[ebp]
	mov	eax, DWORD PTR [edx+4100]
	mov	ecx, DWORD PTR _TND$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?CopyUnreadDataFrom@?$TFixedSizeBinaryData@$0BAAA@@@QAEXPAV1@@Z ENDP ; TFixedSizeBinaryData<4096>::CopyUnreadDataFrom
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tfixedsizebinarydata.hxx
;	COMDAT ?AdjustSize@?$TFixedSizeBinaryData@$0BAAA@@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_sz$ = 8						; size = 4
?AdjustSize@?$TFixedSizeBinaryData@$0BAAA@@@QAEXK@Z PROC ; TFixedSizeBinaryData<4096>::AdjustSize, COMDAT
; _this$ = ecx

; 43   : 	inline void AdjustSize(DWORD sz) { size=sz; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _sz$[ebp]
	mov	DWORD PTR [eax+4104], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?AdjustSize@?$TFixedSizeBinaryData@$0BAAA@@@QAEXK@Z ENDP ; TFixedSizeBinaryData<4096>::AdjustSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tfixedsizebinarydata.hxx
;	COMDAT ?GetSize@?$TFixedSizeBinaryData@$0BAAA@@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetSize@?$TFixedSizeBinaryData@$0BAAA@@@QAEHXZ PROC	; TFixedSizeBinaryData<4096>::GetSize, COMDAT
; _this$ = ecx

; 41   : 	inline int GetSize(void) { return size; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4104]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSize@?$TFixedSizeBinaryData@$0BAAA@@@QAEHXZ ENDP	; TFixedSizeBinaryData<4096>::GetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tfixedsizebinarydata.hxx
;	COMDAT ?Reset@?$TFixedSizeBinaryData@$0BAAA@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Reset@?$TFixedSizeBinaryData@$0BAAA@@@QAEXXZ PROC	; TFixedSizeBinaryData<4096>::Reset, COMDAT
; _this$ = ecx

; 39   : 	inline void Reset(void) { curpos=0; size=0;};

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4100], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4104], 0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@?$TFixedSizeBinaryData@$0BAAA@@@QAEXXZ ENDP	; TFixedSizeBinaryData<4096>::Reset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tfixedsizebinarydata.hxx
;	COMDAT ??B?$TFixedSizeBinaryData@$0BAAA@@@QAEPAXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??B?$TFixedSizeBinaryData@$0BAAA@@@QAEPAXXZ PROC	; TFixedSizeBinaryData<4096>::operator void *, COMDAT
; _this$ = ecx

; 37   : 	inline operator void*(){return &data[0];};

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$TFixedSizeBinaryData@$0BAAA@@@QAEPAXXZ ENDP	; TFixedSizeBinaryData<4096>::operator void *
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tfixedsizebinarydata.hxx
;	COMDAT ??1?$TFixedSizeBinaryData@$0BAAA@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$TFixedSizeBinaryData@$0BAAA@@@UAE@XZ PROC		; TFixedSizeBinaryData<4096>::~TFixedSizeBinaryData<4096>, COMDAT
; _this$ = ecx

; 35   : 	virtual ~TFixedSizeBinaryData() { };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$TFixedSizeBinaryData@$0BAAA@@@6B@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$TFixedSizeBinaryData@$0BAAA@@@UAE@XZ ENDP		; TFixedSizeBinaryData<4096>::~TFixedSizeBinaryData<4096>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tfixedsizebinarydata.hxx
;	COMDAT ??0?$TFixedSizeBinaryData@$0BAAA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$TFixedSizeBinaryData@$0BAAA@@@QAE@XZ PROC		; TFixedSizeBinaryData<4096>::TFixedSizeBinaryData<4096>, COMDAT
; _this$ = ecx

; 33   : 	TFixedSizeBinaryData(){curpos=0;size=0;};

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$TFixedSizeBinaryData@$0BAAA@@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4100], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4104], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$TFixedSizeBinaryData@$0BAAA@@@QAE@XZ ENDP		; TFixedSizeBinaryData<4096>::TFixedSizeBinaryData<4096>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tfixedsizebinarydata.hxx
;	COMDAT ?__readto@?$TFixedSizeBinaryData@$0BAAA@@@AAEXPAXI@Z
_TEXT	SEGMENT
$T1 = -209						; size = 1
_this$ = -8						; size = 4
_ptr$ = 8						; size = 4
_sz$ = 12						; size = 4
?__readto@?$TFixedSizeBinaryData@$0BAAA@@@AAEXPAXI@Z PROC ; TFixedSizeBinaryData<4096>::__readto, COMDAT
; _this$ = ecx

; 30   : 	inline void __readto(void * ptr, unsigned int sz) { if (curpos+sz>size) throw ENoDataForRead(); memcpy(ptr, &data[curpos], sz); curpos+=sz;};

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4100]
	add	ecx, DWORD PTR _sz$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [edx+4104]
	jbe	SHORT $LN2@readto
	push	OFFSET __TI2?AVENoDataForRead@?$TFixedSizeBinaryData@$0BAAA@@@
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@readto:
	mov	eax, DWORD PTR _sz$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4100]
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+4]
	push	ecx
	mov	edx, DWORD PTR _ptr$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4100]
	add	ecx, DWORD PTR _sz$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4100], ecx
$LN3@readto:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?__readto@?$TFixedSizeBinaryData@$0BAAA@@@AAEXPAXI@Z ENDP ; TFixedSizeBinaryData<4096>::__readto
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tfixedsizebinarydata.hxx
;	COMDAT ?__writefrom@?$TFixedSizeBinaryData@$0BAAA@@@AAEXPAXI@Z
_TEXT	SEGMENT
$T1 = -209						; size = 1
_this$ = -8						; size = 4
_ptr$ = 8						; size = 4
_sz$ = 12						; size = 4
?__writefrom@?$TFixedSizeBinaryData@$0BAAA@@@AAEXPAXI@Z PROC ; TFixedSizeBinaryData<4096>::__writefrom, COMDAT
; _this$ = ecx

; 29   : 	inline void __writefrom(void * ptr, unsigned int sz) { if (curpos+sz>SEGSIZE) throw EObjectTooLong(); memcpy(&data[curpos], ptr, sz); curpos+=sz; size+=sz;};

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4100]
	add	ecx, DWORD PTR _sz$[ebp]
	cmp	ecx, 4096				; 00001000H
	jbe	SHORT $LN2@writefrom
	push	OFFSET __TI2?AVEObjectTooLong@?$TFixedSizeBinaryData@$0BAAA@@@
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@writefrom:
	mov	eax, DWORD PTR _sz$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4100]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4100]
	add	ecx, DWORD PTR _sz$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4100], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4104]
	add	ecx, DWORD PTR _sz$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4104], ecx
$LN3@writefrom:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?__writefrom@?$TFixedSizeBinaryData@$0BAAA@@@AAEXPAXI@Z ENDP ; TFixedSizeBinaryData<4096>::__writefrom
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\rmosession.cpp
;	COMDAT ?SendMessageA@CRMOSession@@AAEXPAV?$TFixedSizeBinaryData@$0BAAA@@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_TND$ = 8						; size = 4
?SendMessageA@CRMOSession@@AAEXPAV?$TFixedSizeBinaryData@$0BAAA@@@@Z PROC ; CRMOSession::SendMessageA, COMDAT
; _this$ = ecx

; 232  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 233  : 	OutboundList.Push(TND);

	mov	eax, DWORD PTR _TND$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4228				; 00001084H
	call	?Push@?$TCSPtrQueue@V?$TFixedSizeBinaryData@$0BAAA@@@@@QAEXPAV?$TFixedSizeBinaryData@$0BAAA@@@@Z ; TCSPtrQueue<TFixedSizeBinaryData<4096> >::Push

; 234  : 	if ((PipeIOState&PIO_READ)!=0) 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	and	ecx, 2
	je	SHORT $LN1@SendMessag

; 235  : 	{
; 236  : 		PipeIOState |= PIO_BREAK;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	or	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+108], ecx

; 237  : 		SetEvent(oOverlap.hEvent);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	push	ecx
	call	DWORD PTR __imp__SetEvent@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@SendMessag:

; 238  : 	};
; 239  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SendMessageA@CRMOSession@@AAEXPAV?$TFixedSizeBinaryData@$0BAAA@@@@Z ENDP ; CRMOSession::SendMessageA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\rmosession.cpp
;	COMDAT ?SendCommand@CRMOSession@@AAEXE@Z
_TEXT	SEGMENT
tv75 = -256						; size = 4
$T2 = -248						; size = 4
$T3 = -236						; size = 4
_TND$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_Command$ = 8						; size = 1
?SendCommand@CRMOSession@@AAEXE@Z PROC			; CRMOSession::SendCommand, COMDAT
; _this$ = ecx

; 225  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SendCommand@CRMOSession@@AAEXE@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 226  : 	TSNPData *TND = new TSNPData;

	push	4108					; 0000100cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN3@SendComman
	mov	ecx, DWORD PTR $T2[ebp]
	call	??0?$TFixedSizeBinaryData@$0BAAA@@@QAE@XZ ; TFixedSizeBinaryData<4096>::TFixedSizeBinaryData<4096>
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN4@SendComman
$LN3@SendComman:
	mov	DWORD PTR tv75[ebp], 0
$LN4@SendComman:
	mov	eax, DWORD PTR tv75[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR _TND$[ebp], ecx

; 227  : 	(*TND) << Command;

	lea	eax, DWORD PTR _Command$[ebp]
	push	eax
	mov	ecx, DWORD PTR _TND$[ebp]
	call	??6?$TFixedSizeBinaryData@$0BAAA@@@QAEAAV0@ABE@Z ; TFixedSizeBinaryData<4096>::operator<<

; 228  : 	SendMessage(TND);

	mov	eax, DWORD PTR _TND$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendMessageA@CRMOSession@@AAEXPAV?$TFixedSizeBinaryData@$0BAAA@@@@Z ; CRMOSession::SendMessageA

; 229  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SendCommand@CRMOSession@@AAEXE@Z$0:
	push	4108					; 0000100cH
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?SendCommand@CRMOSession@@AAEXE@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-260]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SendCommand@CRMOSession@@AAEXE@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SendCommand@CRMOSession@@AAEXE@Z ENDP			; CRMOSession::SendCommand
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\rmosession.cpp
;	COMDAT ?ConnectToNewClient@CRMOSession@@AAEXXZ
_TEXT	SEGMENT
tv135 = -256						; size = 4
tv91 = -256						; size = 4
tv75 = -256						; size = 4
$T1 = -248						; size = 4
$T2 = -236						; size = 4
_LastError$ = -32					; size = 4
_fConnected$ = -20					; size = 4
_this$ = -8						; size = 4
?ConnectToNewClient@CRMOSession@@AAEXXZ PROC		; CRMOSession::ConnectToNewClient, COMDAT
; _this$ = ecx

; 34   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 	ConnectToSLNum = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+40], -1

; 36   : 	MustBeDisconnected = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+113], 0

; 37   : 	WasCanceled = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+112], 0

; 38   : 	fPendingIO = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+104], 0

; 39   : 	delete CurrentSendMessage;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4224]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T2[ebp], edx
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN10@ConnectToN
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T2[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN11@ConnectToN
$LN10@ConnectToN:
	mov	DWORD PTR tv75[ebp], 0
$LN11@ConnectToN:

; 40   : 	CurrentSendMessage = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4224], 0

; 41   : 	OutboundList.Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4228				; 00001084H
	call	?Reset@?$TCSPtrQueue@V?$TFixedSizeBinaryData@$0BAAA@@@@@QAEXXZ ; TCSPtrQueue<TFixedSizeBinaryData<4096> >::Reset

; 42   : 	CRMOStoredData::Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Reset@CRMOStoredData@@QAEXXZ		; CRMOStoredData::Reset

; 43   : 		
; 44   : BOOL fConnected;
; 45   : DWORD LastError;
; 46   : 
; 47   : 	fConnected = ConnectNamedPipe(hPipe, &oOverlap);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 76					; 0000004cH
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	push	edx
	call	DWORD PTR __imp__ConnectNamedPipe@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fConnected$[ebp], eax

; 48   : 	LastError = GetLastError();

	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _LastError$[ebp], eax

; 49   :  
; 50   : 	if (fConnected) 
; 51   : 	{
; 52   : //		FLOG << "Error on ConnectNamedPipe " << LastError << endl;
; 53   : 	};
; 54   :  
; 55   :    switch (LastError) 

	mov	eax, DWORD PTR _LastError$[ebp]
	mov	DWORD PTR tv91[ebp], eax
	cmp	DWORD PTR tv91[ebp], 535		; 00000217H
	je	SHORT $LN6@ConnectToN
	cmp	DWORD PTR tv91[ebp], 997		; 000003e5H
	je	SHORT $LN5@ConnectToN
	jmp	SHORT $LN2@ConnectToN
$LN5@ConnectToN:

; 56   :    { 
; 57   :       case ERROR_IO_PENDING: 
; 58   :          fPendingIO = TRUE; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+104], 1

; 59   :          break; 

	jmp	SHORT $LN2@ConnectToN
$LN6@ConnectToN:

; 60   :  
; 61   :       case ERROR_PIPE_CONNECTED: 
; 62   :          if (SetEvent(oOverlap.hEvent)) 

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	push	ecx
	call	DWORD PTR __imp__SetEvent@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@ConnectToN:

; 63   :             break; 
; 64   :  
; 65   : 		default: 
; 66   : 		{
; 67   : //			FLOG << "Error on ConnectNamedPipe (in switch)" << LastError << endl;
; 68   : 		};
; 69   :    } 
; 70   : 	PipeIOState = fPendingIO ? PIO_CONNECT : PIO_READ;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+104], 0
	je	SHORT $LN12@ConnectToN
	mov	DWORD PTR tv135[ebp], 1
	jmp	SHORT $LN13@ConnectToN
$LN12@ConnectToN:
	mov	DWORD PTR tv135[ebp], 2
$LN13@ConnectToN:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv135[ebp]
	mov	DWORD PTR [ecx+108], edx

; 71   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ConnectToNewClient@CRMOSession@@AAEXXZ ENDP		; CRMOSession::ConnectToNewClient
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\rmosession.cpp
;	COMDAT ?CheckTimeout@CRMOSession@@AAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?CheckTimeout@CRMOSession@@AAEXXZ PROC			; CRMOSession::CheckTimeout, COMDAT
; _this$ = ecx

; 74   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 	if (PipeIOState!=PIO_CONNECT && LastRcvTime+KEEPALIVETIMEOUT/2<=GetTickCount())

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+108], 1
	je	SHORT $LN2@CheckTimeo
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+4264]
	add	esi, 250				; 000000faH
	mov	edi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	edi, esp
	call	__RTC_CheckEsp
	cmp	esi, eax
	ja	SHORT $LN2@CheckTimeo

; 76   : 		SendCommand(RMCMD_SRVKEEPALIVE);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendCommand@CRMOSession@@AAEXE@Z	; CRMOSession::SendCommand
$LN2@CheckTimeo:

; 77   : 	if (LastRcvTime+KEEPALIVETIMEOUT<GetTickCount())

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+4264]
	add	esi, 500				; 000001f4H
	mov	edi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	edi, esp
	call	__RTC_CheckEsp
	cmp	esi, eax
	jae	SHORT $LN1@CheckTimeo

; 78   : 	{
; 79   : 		DisconnectNamedPipe(hPipe);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	push	ecx
	call	DWORD PTR __imp__DisconnectNamedPipe@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 80   : 		ConnectToNewClient();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ConnectToNewClient@CRMOSession@@AAEXXZ	; CRMOSession::ConnectToNewClient
$LN1@CheckTimeo:

; 81   : 	};
; 82   : };

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CheckTimeout@CRMOSession@@AAEXXZ ENDP			; CRMOSession::CheckTimeout
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\rmosession.cpp
;	COMDAT ?ProcessMessage@CRMOSession@@AAE_NAAV?$TFixedSizeBinaryData@$0BAAA@@@@Z
_TEXT	SEGMENT
tv276 = -340						; size = 4
tv243 = -340						; size = 4
tv210 = -340						; size = 4
tv67 = -340						; size = 4
$T2 = -332						; size = 4
$T3 = -320						; size = 4
$T4 = -308						; size = 4
$T5 = -296						; size = 4
$T6 = -284						; size = 4
$T7 = -272						; size = 4
_TND2$ = -44						; size = 4
_Command$ = -29						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_TND$ = 8						; size = 4
?ProcessMessage@CRMOSession@@AAE_NAAV?$TFixedSizeBinaryData@$0BAAA@@@@Z PROC ; CRMOSession::ProcessMessage, COMDAT
; _this$ = ecx

; 164  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ProcessMessage@CRMOSession@@AAE_NAAV?$TFixedSizeBinaryData@$0BAAA@@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 328				; 00000148H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-340]
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 165  : unsigned __int8 Command;
; 166  : TSNPData *TND2;
; 167  : unsigned __int32 ui32, ui32_2;
; 168  : 
; 169  : 	TND >> Command;

	lea	eax, DWORD PTR _Command$[ebp]
	push	eax
	mov	ecx, DWORD PTR _TND$[ebp]
	call	??5?$TFixedSizeBinaryData@$0BAAA@@@QAEAAV0@AAE@Z ; TFixedSizeBinaryData<4096>::operator>>

; 170  : 	switch (Command)

	movzx	eax, BYTE PTR _Command$[ebp]
	mov	DWORD PTR tv67[ebp], eax
	mov	ecx, DWORD PTR tv67[ebp]
	sub	ecx, 2
	mov	DWORD PTR tv67[ebp], ecx
	cmp	DWORD PTR tv67[ebp], 66			; 00000042H
	ja	$LN2@ProcessMes
	mov	edx, DWORD PTR tv67[ebp]
	movzx	eax, BYTE PTR $LN25@ProcessMes[edx]
	jmp	DWORD PTR $LN30@ProcessMes[eax*4]

; 171  : 	{
; 172  : 		case RMCMD_SRVKEEPALIVE:
; 173  : //			FLOG << "Check timeout" << endl;
; 174  : 			break;

	jmp	$LN2@ProcessMes
$LN5@ProcessMes:

; 175  : 		case RMCMD_REQUESTBUSYSTATE:
; 176  : 			PostSysMessage(SCMD_USERPRESSSCROLL, 0, InstanceNumber);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+100]
	push	ecx
	push	0
	push	112					; 00000070H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?PostSysMessage@CSystemObject@@IAEXEEGI@Z ; CSystemObject::PostSysMessage

; 177  : 			FLOG << time << "INST# " << InstanceNumber << " Pressed Scroll Lock" << endl;

	push	OFFSET ?endl@@YAAAVCSysOut@@AAV1@@Z	; endl
	push	OFFSET ??_C@_0BF@GIOFFIBC@?5Pressed?5Scroll?5Lock?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	push	ecx
	push	OFFSET ??_C@_06BCABIKMC@INST?$CD?5?$AA@
	push	OFFSET ?time@@YAAAVCSysOut@@AAV1@@Z	; time
	mov	ecx, OFFSET ?FLOG@@3VCSysOut@@A		; FLOG
	call	??6CSysOut@@QAEAAV0@P6AAAV0@AAV0@@Z@Z	; CSysOut::operator<<
	mov	ecx, eax
	call	??6CSysOut@@QAEAAV0@PBD@Z		; CSysOut::operator<<
	mov	ecx, eax
	call	??6CSysOut@@QAEAAV0@I@Z			; CSysOut::operator<<
	mov	ecx, eax
	call	??6CSysOut@@QAEAAV0@PBD@Z		; CSysOut::operator<<
	mov	ecx, eax
	call	??6CSysOut@@QAEAAV0@P6AAAV0@AAV0@@Z@Z	; CSysOut::operator<<

; 178  : 			break;

	jmp	$LN2@ProcessMes
$LN6@ProcessMes:

; 179  : 		case RMCMD_ANSWERKEYPRESSED:
; 180  : 			PostSysMessage(SCMD_USERPRESSPAUSE, 0, InstanceNumber);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+100]
	push	ecx
	push	0
	push	113					; 00000071H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?PostSysMessage@CSystemObject@@IAEXEEGI@Z ; CSystemObject::PostSysMessage

; 181  : 			FLOG << time << "INST# " << InstanceNumber << " Break pressed" << endl;

	push	OFFSET ?endl@@YAAAVCSysOut@@AAV1@@Z	; endl
	push	OFFSET ??_C@_0P@FHCAOLKP@?5Break?5pressed?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	push	ecx
	push	OFFSET ??_C@_06BCABIKMC@INST?$CD?5?$AA@
	push	OFFSET ?time@@YAAAVCSysOut@@AAV1@@Z	; time
	mov	ecx, OFFSET ?FLOG@@3VCSysOut@@A		; FLOG
	call	??6CSysOut@@QAEAAV0@P6AAAV0@AAV0@@Z@Z	; CSysOut::operator<<
	mov	ecx, eax
	call	??6CSysOut@@QAEAAV0@PBD@Z		; CSysOut::operator<<
	mov	ecx, eax
	call	??6CSysOut@@QAEAAV0@I@Z			; CSysOut::operator<<
	mov	ecx, eax
	call	??6CSysOut@@QAEAAV0@PBD@Z		; CSysOut::operator<<
	mov	ecx, eax
	call	??6CSysOut@@QAEAAV0@P6AAAV0@AAV0@@Z@Z	; CSysOut::operator<<

; 182  : 			break;

	jmp	$LN2@ProcessMes
$LN7@ProcessMes:

; 183  : 		case RMCMD_MYNAME:
; 184  : 			TND >> ComputerName >> ClientType;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _TND$[ebp]
	push	edx
	call	??$?5$0BAAA@@@YAAAV?$TFixedSizeBinaryData@$0BAAA@@@AAV0@AAVTZSuperShortString@@@Z ; operator>><4096>
	add	esp, 8
	mov	ecx, eax
	call	??5?$TFixedSizeBinaryData@$0BAAA@@@QAEAAV0@AAI@Z ; TFixedSizeBinaryData<4096>::operator>>

; 185  : 			PostSysMessage(SCMD_LOADPIPEINSTRMOPROFILE, 0, InstanceNumber);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+100]
	push	ecx
	push	0
	push	5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?PostSysMessage@CSystemObject@@IAEXEEGI@Z ; CSystemObject::PostSysMessage

; 186  : 			FLOG << time << "Connection request from " << ComputerName.c_str() << endl;

	push	OFFSET ?endl@@YAAAVCSysOut@@AAV1@@Z	; endl
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?c_str@TZSuperShortString@@QBEPBDXZ	; TZSuperShortString::c_str
	push	eax
	push	OFFSET ??_C@_0BJ@NOAJEKEG@Connection?5request?5from?5?$AA@
	push	OFFSET ?time@@YAAAVCSysOut@@AAV1@@Z	; time
	mov	ecx, OFFSET ?FLOG@@3VCSysOut@@A		; FLOG
	call	??6CSysOut@@QAEAAV0@P6AAAV0@AAV0@@Z@Z	; CSysOut::operator<<
	mov	ecx, eax
	call	??6CSysOut@@QAEAAV0@PBD@Z		; CSysOut::operator<<
	mov	ecx, eax
	call	??6CSysOut@@QAEAAV0@PBD@Z		; CSysOut::operator<<
	mov	ecx, eax
	call	??6CSysOut@@QAEAAV0@P6AAAV0@AAV0@@Z@Z	; CSysOut::operator<<

; 187  : 			break;

	jmp	$LN2@ProcessMes
$LN8@ProcessMes:

; 188  : 	//---------------------------------------------------------------------------------------------
; 189  : 		case RMCMD_GETUIDUSERLIST:
; 190  : 			PostSysMessage(SCMD_USERSPROFILEACCESS, Command, InstanceNumber);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+100]
	push	ecx
	movzx	edx, BYTE PTR _Command$[ebp]
	push	edx
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?PostSysMessage@CSystemObject@@IAEXEEGI@Z ; CSystemObject::PostSysMessage

; 191  : 			break;

	jmp	$LN2@ProcessMes
$LN9@ProcessMes:

; 192  : 		case RMCMD_GETUSERPROFILE:
; 193  : 		case RMCMD_SETUSERPROFILE:
; 194  : 			TND2 = new TSNPData;

	push	4108					; 0000100cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T6[ebp], 0
	je	SHORT $LN16@ProcessMes
	mov	ecx, DWORD PTR $T6[ebp]
	call	??0?$TFixedSizeBinaryData@$0BAAA@@@QAE@XZ ; TFixedSizeBinaryData<4096>::TFixedSizeBinaryData<4096>
	mov	DWORD PTR tv210[ebp], eax
	jmp	SHORT $LN17@ProcessMes
$LN16@ProcessMes:
	mov	DWORD PTR tv210[ebp], 0
$LN17@ProcessMes:
	mov	eax, DWORD PTR tv210[ebp]
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T7[ebp]
	mov	DWORD PTR _TND2$[ebp], ecx

; 195  : 			TND2->CopyUnreadDataFrom(&TND);

	mov	eax, DWORD PTR _TND$[ebp]
	push	eax
	mov	ecx, DWORD PTR _TND2$[ebp]
	call	?CopyUnreadDataFrom@?$TFixedSizeBinaryData@$0BAAA@@@QAEXPAV1@@Z ; TFixedSizeBinaryData<4096>::CopyUnreadDataFrom

; 196  : 			PostSysMessage(SCMD_USERSPROFILEACCESS, Command, InstanceNumber, (unsigned)TND2);

	mov	eax, DWORD PTR _TND2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+100]
	push	edx
	movzx	eax, BYTE PTR _Command$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?PostSysMessage@CSystemObject@@IAEXEEGI@Z ; CSystemObject::PostSysMessage

; 197  : 			break;

	jmp	$LN2@ProcessMes
$LN10@ProcessMes:

; 198  : 	//---------------------------------------------------------------------------------------------
; 199  : 		case RMCMD_GETUIDSERGRPLIST:
; 200  : 			PostSysMessage(SCMD_SERVGPROFILEACCESS, Command, InstanceNumber);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+100]
	push	ecx
	movzx	edx, BYTE PTR _Command$[ebp]
	push	edx
	push	17					; 00000011H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?PostSysMessage@CSystemObject@@IAEXEEGI@Z ; CSystemObject::PostSysMessage

; 201  : 			break;

	jmp	$LN2@ProcessMes
$LN11@ProcessMes:

; 202  : 		case RMCMD_GETSERGRPPROFILE:
; 203  : 		case RMCMD_SETSERGRPPROFILE:
; 204  : 			TND2 = new TSNPData;

	push	4108					; 0000100cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN18@ProcessMes
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0?$TFixedSizeBinaryData@$0BAAA@@@QAE@XZ ; TFixedSizeBinaryData<4096>::TFixedSizeBinaryData<4096>
	mov	DWORD PTR tv243[ebp], eax
	jmp	SHORT $LN19@ProcessMes
$LN18@ProcessMes:
	mov	DWORD PTR tv243[ebp], 0
$LN19@ProcessMes:
	mov	eax, DWORD PTR tv243[ebp]
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T5[ebp]
	mov	DWORD PTR _TND2$[ebp], ecx

; 205  : 			TND2->CopyUnreadDataFrom(&TND);

	mov	eax, DWORD PTR _TND$[ebp]
	push	eax
	mov	ecx, DWORD PTR _TND2$[ebp]
	call	?CopyUnreadDataFrom@?$TFixedSizeBinaryData@$0BAAA@@@QAEXPAV1@@Z ; TFixedSizeBinaryData<4096>::CopyUnreadDataFrom

; 206  : 			PostSysMessage(SCMD_SERVGPROFILEACCESS, Command, InstanceNumber, (unsigned)TND2);

	mov	eax, DWORD PTR _TND2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+100]
	push	edx
	movzx	eax, BYTE PTR _Command$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?PostSysMessage@CSystemObject@@IAEXEEGI@Z ; CSystemObject::PostSysMessage

; 207  : 			break;

	jmp	$LN2@ProcessMes
$LN12@ProcessMes:

; 208  : 	//---------------------------------------------------------------------------------------------
; 209  : 		case RMCMD_GETSLLIST:
; 210  : 			PostSysMessage(SCMD_SLPPROFILEACCESS, Command, InstanceNumber);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+100]
	push	ecx
	movzx	edx, BYTE PTR _Command$[ebp]
	push	edx
	push	18					; 00000012H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?PostSysMessage@CSystemObject@@IAEXEEGI@Z ; CSystemObject::PostSysMessage

; 211  : 			break;

	jmp	$LN2@ProcessMes
$LN13@ProcessMes:

; 212  : 		case RMCMD_SETSLPROFILE:
; 213  : 			TND2 = new TSNPData;

	push	4108					; 0000100cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN20@ProcessMes
	mov	ecx, DWORD PTR $T2[ebp]
	call	??0?$TFixedSizeBinaryData@$0BAAA@@@QAE@XZ ; TFixedSizeBinaryData<4096>::TFixedSizeBinaryData<4096>
	mov	DWORD PTR tv276[ebp], eax
	jmp	SHORT $LN21@ProcessMes
$LN20@ProcessMes:
	mov	DWORD PTR tv276[ebp], 0
$LN21@ProcessMes:
	mov	eax, DWORD PTR tv276[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR _TND2$[ebp], ecx

; 214  : 			TND2->CopyUnreadDataFrom(&TND);

	mov	eax, DWORD PTR _TND$[ebp]
	push	eax
	mov	ecx, DWORD PTR _TND2$[ebp]
	call	?CopyUnreadDataFrom@?$TFixedSizeBinaryData@$0BAAA@@@QAEXPAV1@@Z ; TFixedSizeBinaryData<4096>::CopyUnreadDataFrom

; 215  : 			PostSysMessage(SCMD_SLPPROFILEACCESS, Command, InstanceNumber, (unsigned)TND2);

	mov	eax, DWORD PTR _TND2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+100]
	push	edx
	movzx	eax, BYTE PTR _Command$[ebp]
	push	eax
	push	18					; 00000012H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?PostSysMessage@CSystemObject@@IAEXEEGI@Z ; CSystemObject::PostSysMessage
$LN2@ProcessMes:

; 216  : 			break;
; 217  : 	//---------------------------------------------------------------------------------------------
; 218  : 		default:
; 219  : 			break;
; 220  : 	};
; 221  : 	return true;

	mov	al, 1

; 222  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN29@ProcessMes
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 340				; 00000154H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN29@ProcessMes:
	DD	1
	DD	$LN28@ProcessMes
$LN28@ProcessMes:
	DD	-29					; ffffffe3H
	DD	1
	DD	$LN26@ProcessMes
$LN26@ProcessMes:
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$LN30@ProcessMes:
	DD	$LN7@ProcessMes
	DD	$LN8@ProcessMes
	DD	$LN9@ProcessMes
	DD	$LN10@ProcessMes
	DD	$LN11@ProcessMes
	DD	$LN12@ProcessMes
	DD	$LN13@ProcessMes
	DD	$LN5@ProcessMes
	DD	$LN6@ProcessMes
	DD	$LN2@ProcessMes
$LN25@ProcessMes:
	DB	0
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	1
	DB	9
	DB	2
	DB	9
	DB	2
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	3
	DB	9
	DB	4
	DB	9
	DB	4
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	5
	DB	9
	DB	6
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	7
	DB	9
	DB	9
	DB	9
	DB	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ProcessMessage@CRMOSession@@AAE_NAAV?$TFixedSizeBinaryData@$0BAAA@@@@Z$0:
	push	4108					; 0000100cH
	mov	eax, DWORD PTR $T6[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$?ProcessMessage@CRMOSession@@AAE_NAAV?$TFixedSizeBinaryData@$0BAAA@@@@Z$1:
	push	4108					; 0000100cH
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$?ProcessMessage@CRMOSession@@AAE_NAAV?$TFixedSizeBinaryData@$0BAAA@@@@Z$2:
	push	4108					; 0000100cH
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?ProcessMessage@CRMOSession@@AAE_NAAV?$TFixedSizeBinaryData@$0BAAA@@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-344]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ProcessMessage@CRMOSession@@AAE_NAAV?$TFixedSizeBinaryData@$0BAAA@@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ProcessMessage@CRMOSession@@AAE_NAAV?$TFixedSizeBinaryData@$0BAAA@@@@Z ENDP ; CRMOSession::ProcessMessage
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\rmosession.cpp
;	COMDAT ?ProcessEvent@CRMOSession@@AAEXXZ
_TEXT	SEGMENT
tv231 = -312						; size = 4
tv233 = -308						; size = 4
tv232 = -308						; size = 4
tv230 = -308						; size = 4
tv229 = -308						; size = 4
tv90 = -308						; size = 4
tv82 = -308						; size = 4
tv78 = -308						; size = 4
tv228 = -305						; size = 1
$T2 = -297						; size = 1
$T3 = -288						; size = 4
$T4 = -276						; size = 4
$T5 = -261						; size = 1
_CBR$ = -60						; size = 4
_LastError$ = -48					; size = 4
_RES$ = -36						; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
?ProcessEvent@CRMOSession@@AAEXXZ PROC			; CRMOSession::ProcessEvent, COMDAT
; _this$ = ecx

; 85   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ProcessEvent@CRMOSession@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 296				; 00000128H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-312]
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 86   : DWORD RES, LastError, CBR;
; 87   : 
; 88   : 	if ((PipeIOState&PIO_BREAK)!=0) CancelIo(hPipe);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	and	ecx, 16					; 00000010H
	je	SHORT $LN6@ProcessEve
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	push	ecx
	call	DWORD PTR __imp__CancelIo@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@ProcessEve:

; 89   : 	SetLastError(0);

	mov	esi, esp
	push	0
	call	DWORD PTR __imp__SetLastError@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 90   : 	RES = GetOverlappedResult(hPipe, &oOverlap, &CBR, FALSE);

	mov	esi, esp
	push	0
	lea	eax, DWORD PTR _CBR$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	push	eax
	call	DWORD PTR __imp__GetOverlappedResult@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _RES$[ebp], eax

; 91   : 	LastError = GetLastError();

	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _LastError$[ebp], eax

; 92   : 	try

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 93   : 	{
; 94   : 		switch (LastError)

	mov	eax, DWORD PTR _LastError$[ebp]
	mov	DWORD PTR tv78[ebp], eax
	cmp	DWORD PTR tv78[ebp], 109		; 0000006dH
	je	SHORT $LN8@ProcessEve
	cmp	DWORD PTR tv78[ebp], 233		; 000000e9H
	je	SHORT $LN8@ProcessEve
	cmp	DWORD PTR tv78[ebp], 995		; 000003e3H
	je	SHORT $LN9@ProcessEve
	jmp	SHORT $LN10@ProcessEve
$LN8@ProcessEve:

; 95   : 		{
; 96   : 			case ERROR_BROKEN_PIPE:
; 97   : 			case ERROR_PIPE_NOT_CONNECTED:
; 98   : 				throw EEndOfSession();

	push	OFFSET __TI1?AVEEndOfSession@CRMOSession@@
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	call	__CxxThrowException@8

; 99   : 				break;

	jmp	$LN2@ProcessEve
$LN9@ProcessEve:

; 100  : 			case ERROR_OPERATION_ABORTED:
; 101  : 				break;

	jmp	$LN2@ProcessEve
$LN10@ProcessEve:

; 102  : 
; 103  : 			default:
; 104  : 				switch (PipeIOState)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR tv82[ebp], ecx
	mov	edx, DWORD PTR tv82[ebp]
	sub	edx, 1
	mov	DWORD PTR tv82[ebp], edx
	cmp	DWORD PTR tv82[ebp], 18			; 00000012H
	ja	$LN2@ProcessEve
	mov	eax, DWORD PTR tv82[ebp]
	movzx	ecx, BYTE PTR $LN26@ProcessEve[eax]
	jmp	DWORD PTR $LN32@ProcessEve[ecx*4]
$LN11@ProcessEve:

; 105  : 				{
; 106  : 					case PIO_WRITE|PIO_BREAK:
; 107  : 					case PIO_WRITE:
; 108  : 						delete CurrentSendMessage;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4224]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR $T4[ebp], edx
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN20@ProcessEve
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T4[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T4[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv90[ebp], eax
	jmp	SHORT $LN21@ProcessEve
$LN20@ProcessEve:
	mov	DWORD PTR tv90[ebp], 0
$LN21@ProcessEve:

; 109  : 						CurrentSendMessage = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4224], 0

; 110  : 						break;

	jmp	SHORT $LN2@ProcessEve
$LN12@ProcessEve:

; 111  : 					case PIO_READ|PIO_BREAK:
; 112  : //						FLOG << RES << " " << LastError << " " << CBR << endl;
; 113  : 					case PIO_READ:
; 114  : 						TNDRcv.AdjustSize(CBR);

	mov	eax, DWORD PTR _CBR$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	call	?AdjustSize@?$TFixedSizeBinaryData@$0BAAA@@@QAEXK@Z ; TFixedSizeBinaryData<4096>::AdjustSize

; 115  : 						ProcessMessage(TNDRcv);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 116				; 00000074H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ProcessMessage@CRMOSession@@AAE_NAAV?$TFixedSizeBinaryData@$0BAAA@@@@Z ; CRMOSession::ProcessMessage

; 116  : 						TNDRcv.Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	call	?Reset@?$TFixedSizeBinaryData@$0BAAA@@@QAEXXZ ; TFixedSizeBinaryData<4096>::Reset

; 117  : 						LastRcvTime = GetTickCount();

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4264], eax

; 118  : 						break;

	jmp	SHORT $LN2@ProcessEve
$LN13@ProcessEve:

; 119  : 					case PIO_CONNECT|PIO_BREAK:
; 120  : 					case PIO_CONNECT:
; 121  : 						LastRcvTime = GetTickCount();

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4264], eax

; 122  : 						SendCommand(RMCMD_WHOAREYOU);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendCommand@CRMOSession@@AAEXE@Z	; CRMOSession::SendCommand
$LN2@ProcessEve:

; 123  : 						break;
; 124  : 					case PIO_BREAK:
; 125  : 						break;
; 126  : 				};
; 127  : 		}; // switch(LastError)
; 128  : 
; 129  : 
; 130  : 		if (CurrentSendMessage==NULL && !OutboundList.IsEmpty())

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4224], 0
	jne	SHORT $LN15@ProcessEve
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4228				; 00001084H
	call	?IsEmpty@?$TCSPtrQueue@V?$TFixedSizeBinaryData@$0BAAA@@@@@QAE_NXZ ; TCSPtrQueue<TFixedSizeBinaryData<4096> >::IsEmpty
	mov	BYTE PTR tv228[ebp], al
	movzx	eax, BYTE PTR tv228[ebp]
	test	eax, eax
	jne	SHORT $LN15@ProcessEve

; 131  : 			CurrentSendMessage = OutboundList.Pop();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4228				; 00001084H
	call	?Pop@?$TCSPtrQueue@V?$TFixedSizeBinaryData@$0BAAA@@@@@QAEPAV?$TFixedSizeBinaryData@$0BAAA@@@XZ ; TCSPtrQueue<TFixedSizeBinaryData<4096> >::Pop
	mov	DWORD PTR tv229[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv229[ebp]
	mov	DWORD PTR [eax+4224], ecx
$LN15@ProcessEve:

; 132  : 
; 133  : 		if (CurrentSendMessage!=NULL)// && cbAvail==0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4224], 0
	je	SHORT $LN16@ProcessEve

; 134  : 		{
; 135  : 			WriteFile(hPipe, *CurrentSendMessage, CurrentSendMessage->GetSize(), &RES, &oOverlap);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4224]
	call	?GetSize@?$TFixedSizeBinaryData@$0BAAA@@@QAEHXZ ; TFixedSizeBinaryData<4096>::GetSize
	mov	DWORD PTR tv230[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4224]
	call	??B?$TFixedSizeBinaryData@$0BAAA@@@QAEPAXXZ ; TFixedSizeBinaryData<4096>::operator void *
	mov	DWORD PTR tv231[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 76					; 0000004cH
	mov	esi, esp
	push	edx
	lea	eax, DWORD PTR _RES$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv230[ebp]
	push	ecx
	mov	edx, DWORD PTR tv231[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	push	ecx
	call	DWORD PTR __imp__WriteFile@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 136  : 			PipeIOState = PIO_WRITE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+108], 3

; 137  : 			return;

	jmp	$LN19@ProcessEve
$LN16@ProcessEve:

; 138  : 		};
; 139  : 		if (MustBeDisconnected) throw EEndOfSession();

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+113]
	test	ecx, ecx
	je	SHORT $LN17@ProcessEve
	push	OFFSET __TI1?AVEEndOfSession@CRMOSession@@
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	call	__CxxThrowException@8
$LN17@ProcessEve:

; 140  : 		if (TNDRcv.GetSize()==0)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	call	?GetSize@?$TFixedSizeBinaryData@$0BAAA@@@QAEHXZ ; TFixedSizeBinaryData<4096>::GetSize
	mov	DWORD PTR tv232[ebp], eax
	cmp	DWORD PTR tv232[ebp], 0
	jne	SHORT $LN18@ProcessEve

; 141  : 		{
; 142  : 			ReadFile(hPipe, TNDRcv, NPMAXMESSAGESIZE, &RES, &oOverlap);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	call	??B?$TFixedSizeBinaryData@$0BAAA@@@QAEPAXXZ ; TFixedSizeBinaryData<4096>::operator void *
	mov	DWORD PTR tv233[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 76					; 0000004cH
	mov	esi, esp
	push	eax
	lea	ecx, DWORD PTR _RES$[ebp]
	push	ecx
	push	4096					; 00001000H
	mov	edx, DWORD PTR tv233[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	push	ecx
	call	DWORD PTR __imp__ReadFile@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 143  : 			PipeIOState = PIO_READ;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+108], 2

; 144  : 			return;

	jmp	$LN19@ProcessEve
$LN18@ProcessEve:

; 145  : 		};
; 146  : 	}

	jmp	$LN22@ProcessEve
__catch$?ProcessEvent@CRMOSession@@AAEXXZ$0:

; 147  : 	catch (EEndOfSession)
; 148  : 	{
; 149  : 		PostSysMessage(SCMD_UNREGISTEROPERATOR, 0, InstanceNumber);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+100]
	push	ecx
	push	0
	push	81					; 00000051H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?PostSysMessage@CSystemObject@@IAEXEEGI@Z ; CSystemObject::PostSysMessage

; 150  : /*		if ((ClientType&RMOA_CATEGORYMASK)==RMOA_OPERATOR && 
; 151  : 			(RMOState&RMO_STATEMASK)!=RMO_ALARM &&
; 152  : 			(RMOState&RMO_STATEMASK)!=RMO_BUSY)
; 153  : 		{
; 154  : 			for (int i=0; i<ServiceGroupsList.GetSize(); i++)
; 155  : 				PostSysMessage(SCMD_DECACTOPTINSG, 0, ServiceGroupsList[i]);
; 156  : 		};*/
; 157  : 		FLOG << time << "Error on pipe " << InstanceNumber << " " << RES << " " << LastError<< endl;

	push	OFFSET ?endl@@YAAAVCSysOut@@AAV1@@Z	; endl
	mov	eax, DWORD PTR _LastError$[ebp]
	push	eax
	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	mov	ecx, DWORD PTR _RES$[ebp]
	push	ecx
	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	push	eax
	push	OFFSET ??_C@_0P@BFINMMDK@Error?5on?5pipe?5?$AA@
	push	OFFSET ?time@@YAAAVCSysOut@@AAV1@@Z	; time
	mov	ecx, OFFSET ?FLOG@@3VCSysOut@@A		; FLOG
	call	??6CSysOut@@QAEAAV0@P6AAAV0@AAV0@@Z@Z	; CSysOut::operator<<
	mov	ecx, eax
	call	??6CSysOut@@QAEAAV0@PBD@Z		; CSysOut::operator<<
	mov	ecx, eax
	call	??6CSysOut@@QAEAAV0@I@Z			; CSysOut::operator<<
	mov	ecx, eax
	call	??6CSysOut@@QAEAAV0@PBD@Z		; CSysOut::operator<<
	mov	ecx, eax
	call	??6CSysOut@@QAEAAV0@K@Z			; CSysOut::operator<<
	mov	ecx, eax
	call	??6CSysOut@@QAEAAV0@PBD@Z		; CSysOut::operator<<
	mov	ecx, eax
	call	??6CSysOut@@QAEAAV0@K@Z			; CSysOut::operator<<
	mov	ecx, eax
	call	??6CSysOut@@QAEAAV0@P6AAAV0@AAV0@@Z@Z	; CSysOut::operator<<

; 158  : 		DisconnectNamedPipe(hPipe);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	push	ecx
	call	DWORD PTR __imp__DisconnectNamedPipe@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 159  : 		ConnectToNewClient();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ConnectToNewClient@CRMOSession@@AAEXXZ	; CRMOSession::ConnectToNewClient

; 160  : 	};

	mov	eax, $LN25@ProcessEve
	ret	0
$LN22@ProcessEve:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN19@ProcessEve
$LN25@ProcessEve:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN19@ProcessEve:

; 161  : };

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN31@ProcessEve
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 312				; 00000138H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN31@ProcessEve:
	DD	2
	DD	$LN30@ProcessEve
$LN30@ProcessEve:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN27@ProcessEve
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN28@ProcessEve
$LN28@ProcessEve:
	DB	67					; 00000043H
	DB	66					; 00000042H
	DB	82					; 00000052H
	DB	0
$LN27@ProcessEve:
	DB	82					; 00000052H
	DB	69					; 00000045H
	DB	83					; 00000053H
	DB	0
$LN32@ProcessEve:
	DD	$LN13@ProcessEve
	DD	$LN12@ProcessEve
	DD	$LN11@ProcessEve
	DD	$LN2@ProcessEve
$LN26@ProcessEve:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	0
	DB	1
	DB	2
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?ProcessEvent@CRMOSession@@AAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-316]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ProcessEvent@CRMOSession@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?ProcessEvent@CRMOSession@@AAEXXZ ENDP			; CRMOSession::ProcessEvent
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\rmosession.cpp
;	COMDAT ??1CRMOSession@@UAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1CRMOSession@@UAE@XZ PROC				; CRMOSession::~CRMOSession, COMDAT
; _this$ = ecx

; 25   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CRMOSession@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CRMOSession@@6B@

; 26   : 	OutboundList.Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4228				; 00001084H
	call	?Reset@?$TCSPtrQueue@V?$TFixedSizeBinaryData@$0BAAA@@@@@QAEXXZ ; TCSPtrQueue<TFixedSizeBinaryData<4096> >::Reset

; 27   : 	DisconnectNamedPipe(hPipe);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	push	ecx
	call	DWORD PTR __imp__DisconnectNamedPipe@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 28   : 	CloseHandle(hPipe);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	push	ecx
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 29   : 	CloseHandle(oOverlap.hEvent);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	push	ecx
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 30   : 	DeleteCriticalSection(&CS);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 52					; 00000034H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__DeleteCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 31   : }

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4228				; 00001084H
	call	??1?$TCSPtrQueue@V?$TFixedSizeBinaryData@$0BAAA@@@@@QAE@XZ ; TCSPtrQueue<TFixedSizeBinaryData<4096> >::~TCSPtrQueue<TFixedSizeBinaryData<4096> >
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	call	??1?$TFixedSizeBinaryData@$0BAAA@@@UAE@XZ ; TFixedSizeBinaryData<4096>::~TFixedSizeBinaryData<4096>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1CRMOStoredData@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CRMOSession@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CRMOSession@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CRMOSession@@UAE@XZ ENDP				; CRMOSession::~CRMOSession
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\rmosession.cpp
;	COMDAT ??0CRMOSession@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0CRMOSession@@QAE@XZ PROC				; CRMOSession::CRMOSession, COMDAT
; _this$ = ecx

; 13   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CRMOSession@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CRMOStoredData@@QAE@XZ		; CRMOStoredData::CRMOStoredData
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CRMOSession@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	call	??0?$TFixedSizeBinaryData@$0BAAA@@@QAE@XZ ; TFixedSizeBinaryData<4096>::TFixedSizeBinaryData<4096>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4228				; 00001084H
	call	??0?$TCSPtrQueue@V?$TFixedSizeBinaryData@$0BAAA@@@@@QAE@XZ ; TCSPtrQueue<TFixedSizeBinaryData<4096> >::TCSPtrQueue<TFixedSizeBinaryData<4096> >

; 14   : 	InitializeCriticalSection(&CS);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 52					; 00000034H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__InitializeCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 15   : 	memset(&oOverlap, 0, sizeof(OVERLAPPED));

	push	20					; 00000014H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 76					; 0000004cH
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 16   : 	oOverlap.hEvent = CreateEvent(NULL, TRUE, TRUE, NULL);

	mov	esi, esp
	push	0
	push	1
	push	1
	push	0
	call	DWORD PTR __imp__CreateEventA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+92], eax

; 17   : 	PipeIOState = PIO_CONNECT;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+108], 1

; 18   : 	WasCanceled = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+112], 0

; 19   : 	CurrentSendMessage = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4224], 0

; 20   : 	ConnectToSLNum = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+40], -1

; 21   : //	cout << "CRMOSession=" << this << "-" << (void*)(((char*)this)+sizeof(*this))<< endl;
; 22   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CRMOSession@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1CRMOStoredData@@QAE@XZ
__unwindfunclet$??0CRMOSession@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	jmp	??1?$TFixedSizeBinaryData@$0BAAA@@@UAE@XZ ; TFixedSizeBinaryData<4096>::~TFixedSizeBinaryData<4096>
__ehhandler$??0CRMOSession@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CRMOSession@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CRMOSession@@QAE@XZ ENDP				; CRMOSession::CRMOSession
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1CRMOStoredData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CRMOStoredData@@QAE@XZ PROC				; CRMOStoredData::~CRMOStoredData, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??1TUIList@@QAE@XZ			; TUIList::~TUIList
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1TZSuperShortString@@QAE@XZ		; TZSuperShortString::~TZSuperShortString
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CRMOStoredData@@QAE@XZ ENDP				; CRMOStoredData::~CRMOStoredData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tzssstring.h
;	COMDAT ?c_str@TZSuperShortString@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?c_str@TZSuperShortString@@QBEPBDXZ PROC		; TZSuperShortString::c_str, COMDAT
; _this$ = ecx

; 29   : 	inline const char *c_str(void) const { return str; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?c_str@TZSuperShortString@@QBEPBDXZ ENDP		; TZSuperShortString::c_str
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\sysout.h
;	COMDAT ?endl@@YAAAVCSysOut@@AAV1@@Z
_TEXT	SEGMENT
__outs$ = 8						; size = 4
?endl@@YAAAVCSysOut@@AAV1@@Z PROC			; endl, COMDAT

; 59   : inline CSysOut& __cdecl endl(CSysOut& _outs) { return _outs << '\n' << flush; }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	OFFSET ?flush@@YAAAVCSysOut@@AAV1@@Z	; flush
	push	10					; 0000000aH
	mov	ecx, DWORD PTR __outs$[ebp]
	call	??6CSysOut@@QAEAAV0@D@Z			; CSysOut::operator<<
	mov	ecx, eax
	call	??6CSysOut@@QAEAAV0@P6AAAV0@AAV0@@Z@Z	; CSysOut::operator<<
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?endl@@YAAAVCSysOut@@AAV1@@Z ENDP			; endl
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\sysout.h
;	COMDAT ?flush@@YAAAVCSysOut@@AAV1@@Z
_TEXT	SEGMENT
__outs$ = 8						; size = 4
?flush@@YAAAVCSysOut@@AAV1@@Z PROC			; flush, COMDAT

; 58   : inline CSysOut& __cdecl flush(CSysOut& _outs) { return _outs.flush(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR __outs$[ebp]
	call	?flush@CSysOut@@QAEAAV1@XZ		; CSysOut::flush
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?flush@@YAAAVCSysOut@@AAV1@@Z ENDP			; flush
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\sysout.h
;	COMDAT ??6CSysOut@@QAEAAV0@D@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__c$ = 8						; size = 1
??6CSysOut@@QAEAAV0@D@Z PROC				; CSysOut::operator<<, COMDAT
; _this$ = ecx

; 52   : inline  CSysOut& CSysOut::operator<<(char _c) { return operator<<((unsigned char) _c); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR __c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??6CSysOut@@QAEAAV0@E@Z			; CSysOut::operator<<
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??6CSysOut@@QAEAAV0@D@Z ENDP				; CSysOut::operator<<
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\sysout.h
;	COMDAT ??6CSysOut@@QAEAAV0@P6AAAV0@AAV0@@Z@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__f$ = 8						; size = 4
??6CSysOut@@QAEAAV0@P6AAAV0@AAV0@@Z@Z PROC		; CSysOut::operator<<, COMDAT
; _this$ = ecx

; 49   : inline CSysOut& CSysOut::operator<<(CSysOut& (__cdecl * _f)(CSysOut&)) { (*_f)(*this); return *this; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __f$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??6CSysOut@@QAEAAV0@P6AAAV0@AAV0@@Z@Z ENDP		; CSysOut::operator<<
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\rmosession.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\rmosession.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
