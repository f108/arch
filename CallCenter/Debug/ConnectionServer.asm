; Listing generated by Microsoft (R) Optimizing Compiler Version 19.13.26131.1 

	TITLE	C:\Users\smith\Projects\CallCenter\ConnectionServer.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??6CSysOut@@QAEAAV0@P6AAAV0@AAV0@@Z@Z		; CSysOut::operator<<
PUBLIC	??6CSysOut@@QAEAAV0@D@Z				; CSysOut::operator<<
PUBLIC	?flush@@YAAAVCSysOut@@AAV1@@Z			; flush
PUBLIC	?endl@@YAAAVCSysOut@@AAV1@@Z			; endl
PUBLIC	??0CConnectionServer@@QAE@_N@Z			; CConnectionServer::CConnectionServer
PUBLIC	??1CConnectionServer@@UAE@XZ			; CConnectionServer::~CConnectionServer
PUBLIC	?Execute@CConnectionServer@@UAEXXZ		; CConnectionServer::Execute
PUBLIC	?ReloadRMOProfile@CConnectionServer@@QAEXPAVCRMOStoredData@@@Z ; CConnectionServer::ReloadRMOProfile
PUBLIC	?LoadRMOProfile@CConnectionServer@@QAEXIPAVCRMOStoredData@@@Z ; CConnectionServer::LoadRMOProfile
PUBLIC	?GetPipeInstName@CConnectionServer@@QAE?AVTZSuperShortString@@I@Z ; CConnectionServer::GetPipeInstName
PUBLIC	?GetPipeInstRUID@CConnectionServer@@QAEII@Z	; CConnectionServer::GetPipeInstRUID
PUBLIC	?GetClientType@CConnectionServer@@QAEII@Z	; CConnectionServer::GetClientType
PUBLIC	?GetSGList@CConnectionServer@@QAEXHPAVTUIList@@@Z ; CConnectionServer::GetSGList
PUBLIC	?SendMessageA@CConnectionServer@@QAE_NIPAV?$TFixedSizeBinaryData@$0BAAA@@@@Z ; CConnectionServer::SendMessageA
PUBLIC	?FillFreeRMOList@CConnectionServer@@QAEXPAVTCSUI32DualList@@I@Z ; CConnectionServer::FillFreeRMOList
PUBLIC	?GetSGListForRMO@CConnectionServer@@QAEXIPAVTUIList@@@Z ; CConnectionServer::GetSGListForRMO
PUBLIC	?SetRMOState@CConnectionServer@@QAEXII@Z	; CConnectionServer::SetRMOState
PUBLIC	?ClearRMOState@CConnectionServer@@QAEXII@Z	; CConnectionServer::ClearRMOState
PUBLIC	?GetRMOState@CConnectionServer@@QAEII@Z		; CConnectionServer::GetRMOState
PUBLIC	?GetRMOSLNum@CConnectionServer@@QAEII@Z		; CConnectionServer::GetRMOSLNum
PUBLIC	?GetRMOIndexBySLNum@CConnectionServer@@QAEII@Z	; CConnectionServer::GetRMOIndexBySLNum
PUBLIC	?SetCALLAttr@CConnectionServer@@QAEXIII@Z	; CConnectionServer::SetCALLAttr
PUBLIC	?GetCALLAttr@CConnectionServer@@QAEXIPAI0@Z	; CConnectionServer::GetCALLAttr
PUBLIC	??_GCConnectionServer@@UAEPAXI@Z		; CConnectionServer::`scalar deleting destructor'
PUBLIC	??_7CConnectionServer@@6B@			; CConnectionServer::`vftable'
PUBLIC	??_C@_0BH@MALIKPOO@?2?2?4?2pipe?2TlgCallCenter?$AA@ ; `string'
PUBLIC	??_C@_0BP@GBLNMMBC@Exception?5in?5CConnectionServer?$AA@ ; `string'
PUBLIC	__TI1?AVERMNotAttached@CConnectionServer@@
PUBLIC	__CTA1?AVERMNotAttached@CConnectionServer@@
PUBLIC	??_R0?AVERMNotAttached@CConnectionServer@@@8	; CConnectionServer::ERMNotAttached `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVERMNotAttached@CConnectionServer@@@81
PUBLIC	??_R4CConnectionServer@@6B@			; CConnectionServer::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCConnectionServer@@@8			; CConnectionServer `RTTI Type Descriptor'
PUBLIC	??_R3CConnectionServer@@8			; CConnectionServer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CConnectionServer@@8			; CConnectionServer::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CConnectionServer@@8		; CConnectionServer::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CThread@@8			; CThread::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCThread@@@8				; CThread `RTTI Type Descriptor'
PUBLIC	??_R3CThread@@8					; CThread::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CThread@@8					; CThread::`RTTI Base Class Array'
PUBLIC	??_R1BI@?0A@EN@CSystemObject@@8			; CSystemObject::`RTTI Base Class Descriptor at (24,-1,0,77)'
PUBLIC	??_R0?AVCSystemObject@@@8			; CSystemObject `RTTI Type Descriptor'
PUBLIC	??_R3CSystemObject@@8				; CSystemObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSystemObject@@8				; CSystemObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSystemObject@@8			; CSystemObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_L@YGXPAXIIP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_memset:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__EnterCriticalSection@4:PROC
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	__imp__CreateEventA@16:PROC
EXTRN	__imp__Sleep@4:PROC
EXTRN	__imp__WaitForMultipleObjects@16:PROC
EXTRN	__imp__InitializeSecurityDescriptor@8:PROC
EXTRN	__imp__SetSecurityDescriptorDacl@16:PROC
EXTRN	__imp__CreateNamedPipeA@32:PROC
EXTRN	_malloc:PROC
EXTRN	?flush@CSysOut@@QAEAAV1@XZ:PROC			; CSysOut::flush
EXTRN	??6CSysOut@@QAEAAV0@PBD@Z:PROC			; CSysOut::operator<<
EXTRN	??6CSysOut@@QAEAAV0@E@Z:PROC			; CSysOut::operator<<
EXTRN	?time@@YAAAVCSysOut@@AAV1@@Z:PROC		; time
EXTRN	??0CThread@@QAE@_N@Z:PROC			; CThread::CThread
EXTRN	??1CThread@@UAE@XZ:PROC				; CThread::~CThread
EXTRN	?Reset@TUIList@@QAEXXZ:PROC			; TUIList::Reset
EXTRN	?ValueInList@TUIList@@QBE_NI@Z:PROC		; TUIList::ValueInList
EXTRN	??4TUIList@@QAEXABV0@@Z:PROC			; TUIList::operator=
EXTRN	?Add@TCSUI32DualList@@QAEXII@Z:PROC		; TCSUI32DualList::Add
EXTRN	??0TZSuperShortString@@QAE@XZ:PROC		; TZSuperShortString::TZSuperShortString
EXTRN	??0TZSuperShortString@@QAE@ABV0@@Z:PROC		; TZSuperShortString::TZSuperShortString
EXTRN	??1TZSuperShortString@@QAE@XZ:PROC		; TZSuperShortString::~TZSuperShortString
EXTRN	??4TZSuperShortString@@QAEXABV0@@Z:PROC		; TZSuperShortString::operator=
EXTRN	?PostSysMessage@CSystemObject@@IAEXEEGI@Z:PROC	; CSystemObject::PostSysMessage
EXTRN	?CopyFrom@CRMOStoredData@@QAEXPAV1@@Z:PROC	; CRMOStoredData::CopyFrom
EXTRN	??0CRMOSession@@QAE@XZ:PROC			; CRMOSession::CRMOSession
EXTRN	??1CRMOSession@@UAE@XZ:PROC			; CRMOSession::~CRMOSession
EXTRN	?ProcessEvent@CRMOSession@@AAEXXZ:PROC		; CRMOSession::ProcessEvent
EXTRN	?ConnectToNewClient@CRMOSession@@AAEXXZ:PROC	; CRMOSession::ConnectToNewClient
EXTRN	?SendCommand@CRMOSession@@AAEXE@Z:PROC		; CRMOSession::SendCommand
EXTRN	?SendMessageA@CRMOSession@@AAEXPAV?$TFixedSizeBinaryData@$0BAAA@@@@Z:PROC ; CRMOSession::SendMessageA
EXTRN	??_ECConnectionServer@@UAEPAXI@Z:PROC		; CConnectionServer::`vector deleting destructor'
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?FLOG@@3VCSysOut@@A:BYTE			; FLOG
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@CSystemObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSystemObject@@8 DD FLAT:??_R0?AVCSystemObject@@@8 ; CSystemObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSystemObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CSystemObject@@8
rdata$r	SEGMENT
??_R2CSystemObject@@8 DD FLAT:??_R1A@?0A@EA@CSystemObject@@8 ; CSystemObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CSystemObject@@8
rdata$r	SEGMENT
??_R3CSystemObject@@8 DD 00H				; CSystemObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CSystemObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSystemObject@@@8
data$r	SEGMENT
??_R0?AVCSystemObject@@@8 DD FLAT:??_7type_info@@6B@	; CSystemObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSystemObject@@', 00H
data$r	ENDS
;	COMDAT ??_R1BI@?0A@EN@CSystemObject@@8
rdata$r	SEGMENT
??_R1BI@?0A@EN@CSystemObject@@8 DD FLAT:??_R0?AVCSystemObject@@@8 ; CSystemObject::`RTTI Base Class Descriptor at (24,-1,0,77)'
	DD	00H
	DD	018H
	DD	0ffffffffH
	DD	00H
	DD	04dH
	DD	FLAT:??_R3CSystemObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CThread@@8
rdata$r	SEGMENT
??_R2CThread@@8 DD FLAT:??_R1A@?0A@EA@CThread@@8	; CThread::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CThread@@8
rdata$r	SEGMENT
??_R3CThread@@8 DD 00H					; CThread::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CThread@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCThread@@@8
data$r	SEGMENT
??_R0?AVCThread@@@8 DD FLAT:??_7type_info@@6B@		; CThread `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCThread@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CThread@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CThread@@8 DD FLAT:??_R0?AVCThread@@@8	; CThread::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CThread@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CConnectionServer@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CConnectionServer@@8 DD FLAT:??_R0?AVCConnectionServer@@@8 ; CConnectionServer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CConnectionServer@@8
rdata$r	ENDS
;	COMDAT ??_R2CConnectionServer@@8
rdata$r	SEGMENT
??_R2CConnectionServer@@8 DD FLAT:??_R1A@?0A@EA@CConnectionServer@@8 ; CConnectionServer::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CThread@@8
	DD	FLAT:??_R1BI@?0A@EN@CSystemObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CConnectionServer@@8
rdata$r	SEGMENT
??_R3CConnectionServer@@8 DD 00H			; CConnectionServer::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	FLAT:??_R2CConnectionServer@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCConnectionServer@@@8
data$r	SEGMENT
??_R0?AVCConnectionServer@@@8 DD FLAT:??_7type_info@@6B@ ; CConnectionServer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCConnectionServer@@', 00H
data$r	ENDS
;	COMDAT ??_R4CConnectionServer@@6B@
rdata$r	SEGMENT
??_R4CConnectionServer@@6B@ DD 00H			; CConnectionServer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCConnectionServer@@@8
	DD	FLAT:??_R3CConnectionServer@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVERMNotAttached@CConnectionServer@@@81
xdata$x	SEGMENT
__CT??_R0?AVERMNotAttached@CConnectionServer@@@81 DD 00H
	DD	FLAT:??_R0?AVERMNotAttached@CConnectionServer@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	01H
	DD	00H
xdata$x	ENDS
;	COMDAT ??_R0?AVERMNotAttached@CConnectionServer@@@8
data$r	SEGMENT
??_R0?AVERMNotAttached@CConnectionServer@@@8 DD FLAT:??_7type_info@@6B@ ; CConnectionServer::ERMNotAttached `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVERMNotAttached@CConnectionServer@@', 00H
data$r	ENDS
;	COMDAT __CTA1?AVERMNotAttached@CConnectionServer@@
xdata$x	SEGMENT
__CTA1?AVERMNotAttached@CConnectionServer@@ DD 01H
	DD	FLAT:__CT??_R0?AVERMNotAttached@CConnectionServer@@@81
xdata$x	ENDS
;	COMDAT __TI1?AVERMNotAttached@CConnectionServer@@
xdata$x	SEGMENT
__TI1?AVERMNotAttached@CConnectionServer@@ DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA1?AVERMNotAttached@CConnectionServer@@
xdata$x	ENDS
;	COMDAT ??_C@_0BP@GBLNMMBC@Exception?5in?5CConnectionServer?$AA@
CONST	SEGMENT
??_C@_0BP@GBLNMMBC@Exception?5in?5CConnectionServer?$AA@ DB 'Exception in'
	DB	' CConnectionServer', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@MALIKPOO@?2?2?4?2pipe?2TlgCallCenter?$AA@
CONST	SEGMENT
??_C@_0BH@MALIKPOO@?2?2?4?2pipe?2TlgCallCenter?$AA@ DB '\\.\pipe\TlgCallC'
	DB	'enter', 00H					; `string'
CONST	ENDS
;	COMDAT ??_7CConnectionServer@@6B@
CONST	SEGMENT
??_7CConnectionServer@@6B@ DD FLAT:??_R4CConnectionServer@@6B@ ; CConnectionServer::`vftable'
	DD	FLAT:??_ECConnectionServer@@UAEPAXI@Z
	DD	FLAT:?Execute@CConnectionServer@@UAEXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetPipeInstName@CConnectionServer@@QAE?AVTZSuperShortString@@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetPipeInstName@CConnectionServer@@QAE?AVTZSuperShortString@@I@Z$1
__ehfuncinfo$?GetPipeInstName@CConnectionServer@@QAE?AVTZSuperShortString@@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetPipeInstName@CConnectionServer@@QAE?AVTZSuperShortString@@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?Execute@CConnectionServer@@UAEXXZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Execute@CConnectionServer@@UAEXXZ$0
__unwindtable$?Execute@CConnectionServer@@UAEXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?Execute@CConnectionServer@@UAEXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?Execute@CConnectionServer@@UAEXXZ$2
__ehfuncinfo$?Execute@CConnectionServer@@UAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Execute@CConnectionServer@@UAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?Execute@CConnectionServer@@UAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CConnectionServer@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CConnectionServer@@QAE@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CConnectionServer@@QAE@_N@Z$0
__ehfuncinfo$??0CConnectionServer@@QAE@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CConnectionServer@@QAE@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCConnectionServer@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCConnectionServer@@UAEPAXI@Z PROC			; CConnectionServer::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CConnectionServer@@UAE@XZ		; CConnectionServer::~CConnectionServer
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	68380					; 00010b1cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCConnectionServer@@UAEPAXI@Z ENDP			; CConnectionServer::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\connectionserver.cpp
;	COMDAT ?GetCALLAttr@CConnectionServer@@QAEXIPAI0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_RMOIndex$ = 8						; size = 4
_SLNum$ = 12						; size = 4
_SGID$ = 16						; size = 4
?GetCALLAttr@CConnectionServer@@QAEXIPAI0@Z PROC	; CConnectionServer::GetCALLAttr, COMDAT
; _this$ = ecx

; 259  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 260  : 	if (RMOIndex>=INSTANCESCOUNT) return;

	cmp	DWORD PTR _RMOIndex$[ebp], 16		; 00000010H
	jb	SHORT $LN2@GetCALLAtt
	jmp	SHORT $LN1@GetCALLAtt
$LN2@GetCALLAtt:

; 261  : 	EnterCriticalSection(&RMS[RMOIndex].CS);

	imul	eax, DWORD PTR _RMOIndex$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+144]
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 262  : 	(*SGID) = RMS[RMOIndex].SLSG;

	imul	eax, DWORD PTR _RMOIndex$[ebp], 4268
	mov	ecx, DWORD PTR _SGID$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+eax+136]
	mov	DWORD PTR [ecx], eax

; 263  : 	(*SLNum) = RMS[RMOIndex].ConnectToSLNum;

	imul	eax, DWORD PTR _RMOIndex$[ebp], 4268
	mov	ecx, DWORD PTR _SLNum$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+eax+132]
	mov	DWORD PTR [ecx], eax

; 264  : 	LeaveCriticalSection(&RMS[RMOIndex].CS);

	imul	eax, DWORD PTR _RMOIndex$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+144]
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@GetCALLAtt:

; 265  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetCALLAttr@CConnectionServer@@QAEXIPAI0@Z ENDP	; CConnectionServer::GetCALLAttr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\connectionserver.cpp
;	COMDAT ?SetCALLAttr@CConnectionServer@@QAEXIII@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_RMOIndex$ = 8						; size = 4
_SLNum$ = 12						; size = 4
_SGID$ = 16						; size = 4
?SetCALLAttr@CConnectionServer@@QAEXIII@Z PROC		; CConnectionServer::SetCALLAttr, COMDAT
; _this$ = ecx

; 250  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 251  : 	if (RMOIndex>=INSTANCESCOUNT) return;

	cmp	DWORD PTR _RMOIndex$[ebp], 16		; 00000010H
	jb	SHORT $LN2@SetCALLAtt
	jmp	SHORT $LN1@SetCALLAtt
$LN2@SetCALLAtt:

; 252  : 	EnterCriticalSection(&RMS[RMOIndex].CS);

	imul	eax, DWORD PTR _RMOIndex$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+144]
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 253  : 	RMS[RMOIndex].SLSG = SGID;

	imul	eax, DWORD PTR _RMOIndex$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _SGID$[ebp]
	mov	DWORD PTR [ecx+eax+136], edx

; 254  : 	RMS[RMOIndex].ConnectToSLNum = SLNum;

	imul	eax, DWORD PTR _RMOIndex$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _SLNum$[ebp]
	mov	DWORD PTR [ecx+eax+132], edx

; 255  : 	LeaveCriticalSection(&RMS[RMOIndex].CS);

	imul	eax, DWORD PTR _RMOIndex$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+144]
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@SetCALLAtt:

; 256  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetCALLAttr@CConnectionServer@@QAEXIII@Z ENDP		; CConnectionServer::SetCALLAttr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\connectionserver.cpp
;	COMDAT ?GetRMOIndexBySLNum@CConnectionServer@@QAEII@Z
_TEXT	SEGMENT
$T1 = -221						; size = 1
_i$2 = -20						; size = 4
_this$ = -8						; size = 4
_SLNum$ = 8						; size = 4
?GetRMOIndexBySLNum@CConnectionServer@@QAEII@Z PROC	; CConnectionServer::GetRMOIndexBySLNum, COMDAT
; _this$ = ecx

; 216  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 217  : 	for (int i=0; i<INSTANCESCOUNT; i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@GetRMOInde
$LN2@GetRMOInde:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@GetRMOInde:
	cmp	DWORD PTR _i$2[ebp], 16			; 00000010H
	jge	$LN3@GetRMOInde

; 218  : 	{
; 219  : 		EnterCriticalSection(&RMS[i].CS);

	imul	eax, DWORD PTR _i$2[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+144]
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 220  : 		if (RMS[i].RMLineNumber==SLNum && (RMS[i].ClientType&RMOA_CATEGORYMASK)==RMOA_OPERATOR)

	imul	eax, DWORD PTR _i$2[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+124]
	cmp	edx, DWORD PTR _SLNum$[ebp]
	jne	SHORT $LN5@GetRMOInde
	imul	eax, DWORD PTR _i$2[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+128]
	and	edx, 196608				; 00030000H
	jne	SHORT $LN5@GetRMOInde

; 221  : 		{
; 222  : 			LeaveCriticalSection(&RMS[i].CS);

	imul	eax, DWORD PTR _i$2[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+144]
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 223  : 			return i;

	mov	eax, DWORD PTR _i$2[ebp]
	jmp	SHORT $LN6@GetRMOInde
$LN5@GetRMOInde:

; 224  : 		};
; 225  : 		LeaveCriticalSection(&RMS[i].CS);

	imul	eax, DWORD PTR _i$2[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+144]
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 226  : 	};

	jmp	$LN2@GetRMOInde
$LN3@GetRMOInde:

; 227  : 	throw ERMNotAttached();

	push	OFFSET __TI1?AVERMNotAttached@CConnectionServer@@
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	__CxxThrowException@8
$LN6@GetRMOInde:

; 228  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetRMOIndexBySLNum@CConnectionServer@@QAEII@Z ENDP	; CConnectionServer::GetRMOIndexBySLNum
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\connectionserver.cpp
;	COMDAT ?GetRMOSLNum@CConnectionServer@@QAEII@Z
_TEXT	SEGMENT
_ret$ = -20						; size = 4
_this$ = -8						; size = 4
_PipeInstanceNumber$ = 8				; size = 4
?GetRMOSLNum@CConnectionServer@@QAEII@Z PROC		; CConnectionServer::GetRMOSLNum, COMDAT
; _this$ = ecx

; 206  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 207  : unsigned ret;
; 208  : 	if (PipeInstanceNumber>=INSTANCESCOUNT) return 0;

	cmp	DWORD PTR _PipeInstanceNumber$[ebp], 16	; 00000010H
	jb	SHORT $LN2@GetRMOSLNu
	xor	eax, eax
	jmp	SHORT $LN1@GetRMOSLNu
$LN2@GetRMOSLNu:

; 209  : 	EnterCriticalSection(&RMS[PipeInstanceNumber].CS);

	imul	eax, DWORD PTR _PipeInstanceNumber$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+144]
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 210  : 	ret = RMS[PipeInstanceNumber].RMLineNumber;

	imul	eax, DWORD PTR _PipeInstanceNumber$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+124]
	mov	DWORD PTR _ret$[ebp], edx

; 211  : 	LeaveCriticalSection(&RMS[PipeInstanceNumber].CS);

	imul	eax, DWORD PTR _PipeInstanceNumber$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+144]
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 212  : 	return ret;

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@GetRMOSLNu:

; 213  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetRMOSLNum@CConnectionServer@@QAEII@Z ENDP		; CConnectionServer::GetRMOSLNum
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\connectionserver.cpp
;	COMDAT ?GetRMOState@CConnectionServer@@QAEII@Z
_TEXT	SEGMENT
_ret$ = -20						; size = 4
_this$ = -8						; size = 4
_PipeInstanceNumber$ = 8				; size = 4
?GetRMOState@CConnectionServer@@QAEII@Z PROC		; CConnectionServer::GetRMOState, COMDAT
; _this$ = ecx

; 196  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 197  : unsigned ret;
; 198  : 	if (PipeInstanceNumber>=INSTANCESCOUNT) return 0;

	cmp	DWORD PTR _PipeInstanceNumber$[ebp], 16	; 00000010H
	jb	SHORT $LN2@GetRMOStat
	xor	eax, eax
	jmp	SHORT $LN1@GetRMOStat
$LN2@GetRMOStat:

; 199  : 	EnterCriticalSection(&RMS[PipeInstanceNumber].CS);

	imul	eax, DWORD PTR _PipeInstanceNumber$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+144]
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 200  : 	ret = RMS[PipeInstanceNumber].RMOState;

	imul	eax, DWORD PTR _PipeInstanceNumber$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+140]
	mov	DWORD PTR _ret$[ebp], edx

; 201  : 	LeaveCriticalSection(&RMS[PipeInstanceNumber].CS);

	imul	eax, DWORD PTR _PipeInstanceNumber$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+144]
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 202  : 	return ret;

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@GetRMOStat:

; 203  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetRMOState@CConnectionServer@@QAEII@Z ENDP		; CConnectionServer::GetRMOState
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\connectionserver.cpp
;	COMDAT ?ClearRMOState@CConnectionServer@@QAEXII@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_PipeInstanceNumber$ = 8				; size = 4
_State$ = 12						; size = 4
?ClearRMOState@CConnectionServer@@QAEXII@Z PROC		; CConnectionServer::ClearRMOState, COMDAT
; _this$ = ecx

; 187  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 188  : 	if (PipeInstanceNumber>=INSTANCESCOUNT) return;

	cmp	DWORD PTR _PipeInstanceNumber$[ebp], 16	; 00000010H
	jb	SHORT $LN2@ClearRMOSt
	jmp	SHORT $LN1@ClearRMOSt
$LN2@ClearRMOSt:

; 189  : 	EnterCriticalSection(&RMS[PipeInstanceNumber].CS);

	imul	eax, DWORD PTR _PipeInstanceNumber$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+144]
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 190  : 	if (State>RMO_STATEMASK)

	cmp	DWORD PTR _State$[ebp], 255		; 000000ffH
	jbe	SHORT $LN3@ClearRMOSt

; 191  : 		RMS[PipeInstanceNumber].RMOState &= ~State;

	imul	eax, DWORD PTR _PipeInstanceNumber$[ebp], 4268
	mov	ecx, DWORD PTR _State$[ebp]
	not	ecx
	mov	edx, DWORD PTR _this$[ebp]
	and	ecx, DWORD PTR [edx+eax+140]
	imul	eax, DWORD PTR _PipeInstanceNumber$[ebp], 4268
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+eax+140], ecx
$LN3@ClearRMOSt:

; 192  : 	LeaveCriticalSection(&RMS[PipeInstanceNumber].CS);

	imul	eax, DWORD PTR _PipeInstanceNumber$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+144]
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@ClearRMOSt:

; 193  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ClearRMOState@CConnectionServer@@QAEXII@Z ENDP		; CConnectionServer::ClearRMOState
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\connectionserver.cpp
;	COMDAT ?SetRMOState@CConnectionServer@@QAEXII@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_PipeInstanceNumber$ = 8				; size = 4
_State$ = 12						; size = 4
?SetRMOState@CConnectionServer@@QAEXII@Z PROC		; CConnectionServer::SetRMOState, COMDAT
; _this$ = ecx

; 176  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 177  : 	if (PipeInstanceNumber>=INSTANCESCOUNT) return;

	cmp	DWORD PTR _PipeInstanceNumber$[ebp], 16	; 00000010H
	jb	SHORT $LN2@SetRMOStat
	jmp	$LN1@SetRMOStat
$LN2@SetRMOStat:

; 178  : 	EnterCriticalSection(&RMS[PipeInstanceNumber].CS);

	imul	eax, DWORD PTR _PipeInstanceNumber$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+144]
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 179  : 	if (State<RMO_STATEMASK)

	cmp	DWORD PTR _State$[ebp], 255		; 000000ffH
	jae	SHORT $LN3@SetRMOStat

; 180  : 		RMS[PipeInstanceNumber].RMOState = RMS[PipeInstanceNumber].RMOState&~RMO_STATEMASK|State;

	imul	eax, DWORD PTR _PipeInstanceNumber$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+140]
	and	edx, -256				; ffffff00H
	or	edx, DWORD PTR _State$[ebp]
	imul	eax, DWORD PTR _PipeInstanceNumber$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+140], edx

; 181  : 	else

	jmp	SHORT $LN4@SetRMOStat
$LN3@SetRMOStat:

; 182  : 		RMS[PipeInstanceNumber].RMOState |= State;

	imul	eax, DWORD PTR _PipeInstanceNumber$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+140]
	or	edx, DWORD PTR _State$[ebp]
	imul	eax, DWORD PTR _PipeInstanceNumber$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+140], edx
$LN4@SetRMOStat:

; 183  : 	LeaveCriticalSection(&RMS[PipeInstanceNumber].CS);

	imul	eax, DWORD PTR _PipeInstanceNumber$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+144]
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@SetRMOStat:

; 184  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetRMOState@CConnectionServer@@QAEXII@Z ENDP		; CConnectionServer::SetRMOState
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\connectionserver.cpp
;	COMDAT ?GetSGListForRMO@CConnectionServer@@QAEXIPAVTUIList@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_RMOIndex$ = 8						; size = 4
_UIL$ = 12						; size = 4
?GetSGListForRMO@CConnectionServer@@QAEXIPAVTUIList@@@Z PROC ; CConnectionServer::GetSGListForRMO, COMDAT
; _this$ = ecx

; 242  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 243  : 	if (RMOIndex>=INSTANCESCOUNT) return;

	cmp	DWORD PTR _RMOIndex$[ebp], 16		; 00000010H
	jb	SHORT $LN2@GetSGListF
	jmp	SHORT $LN1@GetSGListF
$LN2@GetSGListF:

; 244  : 	EnterCriticalSection(&RMS[RMOIndex].CS);

	imul	eax, DWORD PTR _RMOIndex$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+144]
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 245  : 	(*UIL) = RMS[RMOIndex].ServiceGroupsList;

	imul	eax, DWORD PTR _RMOIndex$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+112]
	push	edx
	mov	ecx, DWORD PTR _UIL$[ebp]
	call	??4TUIList@@QAEXABV0@@Z			; TUIList::operator=

; 246  : 	LeaveCriticalSection(&RMS[RMOIndex].CS);

	imul	eax, DWORD PTR _RMOIndex$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+144]
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@GetSGListF:

; 247  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?GetSGListForRMO@CConnectionServer@@QAEXIPAVTUIList@@@Z ENDP ; CConnectionServer::GetSGListForRMO
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\connectionserver.cpp
;	COMDAT ?FillFreeRMOList@CConnectionServer@@QAEXPAVTCSUI32DualList@@I@Z
_TEXT	SEGMENT
_p$1 = -20						; size = 4
_this$ = -8						; size = 4
_UIDL$ = 8						; size = 4
_SG$ = 12						; size = 4
?FillFreeRMOList@CConnectionServer@@QAEXPAVTCSUI32DualList@@I@Z PROC ; CConnectionServer::FillFreeRMOList, COMDAT
; _this$ = ecx

; 231  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 232  : 	for (unsigned p=0; p<INSTANCESCOUNT; p++)

	mov	DWORD PTR _p$1[ebp], 0
	jmp	SHORT $LN4@FillFreeRM
$LN2@FillFreeRM:
	mov	eax, DWORD PTR _p$1[ebp]
	add	eax, 1
	mov	DWORD PTR _p$1[ebp], eax
$LN4@FillFreeRM:
	cmp	DWORD PTR _p$1[ebp], 16			; 00000010H
	jae	SHORT $LN1@FillFreeRM

; 233  : 	{
; 234  : 		if (RMS[p].ClientType!=RMOA_OPERATOR ||
; 235  : 			RMS[p].RMOState!=RMO_WAITCALL || 

	imul	eax, DWORD PTR _p$1[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+128], 0
	jne	SHORT $LN6@FillFreeRM
	imul	eax, DWORD PTR _p$1[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+140], 2
	jne	SHORT $LN6@FillFreeRM
	mov	eax, DWORD PTR _SG$[ebp]
	push	eax
	imul	ecx, DWORD PTR _p$1[ebp], 4268
	mov	edx, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [edx+ecx+112]
	call	?ValueInList@TUIList@@QBE_NI@Z		; TUIList::ValueInList
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN5@FillFreeRM
$LN6@FillFreeRM:

; 236  : 			!RMS[p].ServiceGroupsList.ValueInList(SG)) continue;

	jmp	SHORT $LN2@FillFreeRM
$LN5@FillFreeRM:

; 237  : 		UIDL->Add(p, RMS[p].RMOUID);

	imul	eax, DWORD PTR _p$1[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+96]
	push	edx
	mov	eax, DWORD PTR _p$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _UIDL$[ebp]
	call	?Add@TCSUI32DualList@@QAEXII@Z		; TCSUI32DualList::Add

; 238  : 	};

	jmp	SHORT $LN2@FillFreeRM
$LN1@FillFreeRM:

; 239  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?FillFreeRMOList@CConnectionServer@@QAEXPAVTCSUI32DualList@@I@Z ENDP ; CConnectionServer::FillFreeRMOList
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\connectionserver.cpp
;	COMDAT ?SendMessageA@CConnectionServer@@QAE_NIPAV?$TFixedSizeBinaryData@$0BAAA@@@@Z
_TEXT	SEGMENT
tv80 = -232						; size = 4
$T1 = -224						; size = 4
$T2 = -212						; size = 4
_this$ = -8						; size = 4
_PipeInstanceNumber$ = 8				; size = 4
_TND$ = 12						; size = 4
?SendMessageA@CConnectionServer@@QAE_NIPAV?$TFixedSizeBinaryData@$0BAAA@@@@Z PROC ; CConnectionServer::SendMessageA, COMDAT
; _this$ = ecx

; 140  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 141  : 	if (PipeInstanceNumber>=INSTANCESCOUNT || RMS[PipeInstanceNumber].RMOUID==0)

	cmp	DWORD PTR _PipeInstanceNumber$[ebp], 16	; 00000010H
	jae	SHORT $LN3@SendMessag
	imul	eax, DWORD PTR _PipeInstanceNumber$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+96], 0
	jne	SHORT $LN2@SendMessag
$LN3@SendMessag:

; 142  : 	{
; 143  : 		delete TND;

	mov	eax, DWORD PTR _TND$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN5@SendMessag
	mov	esi, esp
	push	1
	mov	edx, DWORD PTR $T2[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN6@SendMessag
$LN5@SendMessag:
	mov	DWORD PTR tv80[ebp], 0
$LN6@SendMessag:

; 144  : 		return false;

	xor	al, al
	jmp	SHORT $LN1@SendMessag
$LN2@SendMessag:

; 145  : 	};
; 146  : 	RMS[PipeInstanceNumber].SendMessage(TND);

	mov	eax, DWORD PTR _TND$[ebp]
	push	eax
	imul	ecx, DWORD PTR _PipeInstanceNumber$[ebp], 4268
	mov	edx, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [edx+ecx+92]
	call	?SendMessageA@CRMOSession@@AAEXPAV?$TFixedSizeBinaryData@$0BAAA@@@@Z ; CRMOSession::SendMessageA

; 147  : 	return true;

	mov	al, 1
$LN1@SendMessag:

; 148  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SendMessageA@CConnectionServer@@QAE_NIPAV?$TFixedSizeBinaryData@$0BAAA@@@@Z ENDP ; CConnectionServer::SendMessageA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\connectionserver.cpp
;	COMDAT ?GetSGList@CConnectionServer@@QAEXHPAVTUIList@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_PipeInstanceNumber$ = 8				; size = 4
_UIL$ = 12						; size = 4
?GetSGList@CConnectionServer@@QAEXHPAVTUIList@@@Z PROC	; CConnectionServer::GetSGList, COMDAT
; _this$ = ecx

; 161  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 162  : 	if (unsigned(PipeInstanceNumber)>=INSTANCESCOUNT) return;

	cmp	DWORD PTR _PipeInstanceNumber$[ebp], 16	; 00000010H
	jb	SHORT $LN2@GetSGList
	jmp	SHORT $LN1@GetSGList
$LN2@GetSGList:

; 163  : 	(*UIL).Reset();

	mov	ecx, DWORD PTR _UIL$[ebp]
	call	?Reset@TUIList@@QAEXXZ			; TUIList::Reset

; 164  : 	EnterCriticalSection(&RMS[PipeInstanceNumber].CS);

	imul	eax, DWORD PTR _PipeInstanceNumber$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+144]
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 165  : 	(*UIL) = RMS[PipeInstanceNumber].ServiceGroupsList;

	imul	eax, DWORD PTR _PipeInstanceNumber$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+112]
	push	edx
	mov	ecx, DWORD PTR _UIL$[ebp]
	call	??4TUIList@@QAEXABV0@@Z			; TUIList::operator=

; 166  : 	LeaveCriticalSection(&RMS[PipeInstanceNumber].CS);

	imul	eax, DWORD PTR _PipeInstanceNumber$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+144]
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@GetSGList:

; 167  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?GetSGList@CConnectionServer@@QAEXHPAVTUIList@@@Z ENDP	; CConnectionServer::GetSGList
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\connectionserver.cpp
;	COMDAT ?GetClientType@CConnectionServer@@QAEII@Z
_TEXT	SEGMENT
_ret$ = -20						; size = 4
_this$ = -8						; size = 4
_PipeInstanceNumber$ = 8				; size = 4
?GetClientType@CConnectionServer@@QAEII@Z PROC		; CConnectionServer::GetClientType, COMDAT
; _this$ = ecx

; 151  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 152  : 	if (PipeInstanceNumber>=INSTANCESCOUNT) return 0;

	cmp	DWORD PTR _PipeInstanceNumber$[ebp], 16	; 00000010H
	jb	SHORT $LN2@GetClientT
	xor	eax, eax
	jmp	SHORT $LN1@GetClientT
$LN2@GetClientT:

; 153  : unsigned __int32 ret;
; 154  : 	EnterCriticalSection(&RMS[PipeInstanceNumber].CS);

	imul	eax, DWORD PTR _PipeInstanceNumber$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+144]
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 155  : 	ret = RMS[PipeInstanceNumber].ClientType;

	imul	eax, DWORD PTR _PipeInstanceNumber$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+128]
	mov	DWORD PTR _ret$[ebp], edx

; 156  : 	LeaveCriticalSection(&RMS[PipeInstanceNumber].CS);

	imul	eax, DWORD PTR _PipeInstanceNumber$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+144]
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 157  : 	return ret;

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@GetClientT:

; 158  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetClientType@CConnectionServer@@QAEII@Z ENDP		; CConnectionServer::GetClientType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\connectionserver.cpp
;	COMDAT ?GetPipeInstRUID@CConnectionServer@@QAEII@Z
_TEXT	SEGMENT
_ret$ = -20						; size = 4
_this$ = -8						; size = 4
_PipeInstanceNumber$ = 8				; size = 4
?GetPipeInstRUID@CConnectionServer@@QAEII@Z PROC	; CConnectionServer::GetPipeInstRUID, COMDAT
; _this$ = ecx

; 130  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 131  : 	if (PipeInstanceNumber>=INSTANCESCOUNT) return 0;

	cmp	DWORD PTR _PipeInstanceNumber$[ebp], 16	; 00000010H
	jb	SHORT $LN2@GetPipeIns
	xor	eax, eax
	jmp	SHORT $LN1@GetPipeIns
$LN2@GetPipeIns:

; 132  : unsigned __int32 ret;
; 133  : 	EnterCriticalSection(&RMS[PipeInstanceNumber].CS);

	imul	eax, DWORD PTR _PipeInstanceNumber$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+144]
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 134  : 	ret = RMS[PipeInstanceNumber].RMOUID;

	imul	eax, DWORD PTR _PipeInstanceNumber$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+96]
	mov	DWORD PTR _ret$[ebp], edx

; 135  : 	LeaveCriticalSection(&RMS[PipeInstanceNumber].CS);

	imul	eax, DWORD PTR _PipeInstanceNumber$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+144]
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 136  : 	return ret;

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@GetPipeIns:

; 137  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetPipeInstRUID@CConnectionServer@@QAEII@Z ENDP	; CConnectionServer::GetPipeInstRUID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\connectionserver.cpp
;	COMDAT ?GetPipeInstName@CConnectionServer@@QAE?AVTZSuperShortString@@I@Z
_TEXT	SEGMENT
$T2 = -240						; size = 4
_ret$ = -36						; size = 8
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_PipeInstanceNumber$ = 12				; size = 4
?GetPipeInstName@CConnectionServer@@QAE?AVTZSuperShortString@@I@Z PROC ; CConnectionServer::GetPipeInstName, COMDAT
; _this$ = ecx

; 120  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetPipeInstName@CConnectionServer@@QAE?AVTZSuperShortString@@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0

; 121  : 	if (PipeInstanceNumber>=INSTANCESCOUNT) return TZSuperShortString();

	cmp	DWORD PTR _PipeInstanceNumber$[ebp], 16	; 00000010H
	jb	SHORT $LN2@GetPipeIns
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0TZSuperShortString@@QAE@XZ		; TZSuperShortString::TZSuperShortString
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN1@GetPipeIns
$LN2@GetPipeIns:

; 122  : TZSuperShortString ret;

	lea	ecx, DWORD PTR _ret$[ebp]
	call	??0TZSuperShortString@@QAE@XZ		; TZSuperShortString::TZSuperShortString
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 123  : 	EnterCriticalSection(&RMS[PipeInstanceNumber].CS);

	imul	eax, DWORD PTR _PipeInstanceNumber$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+144]
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 124  : 	ret = RMS[PipeInstanceNumber].ComputerName;

	imul	eax, DWORD PTR _PipeInstanceNumber$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+100]
	push	edx
	lea	ecx, DWORD PTR _ret$[ebp]
	call	??4TZSuperShortString@@QAEXABV0@@Z	; TZSuperShortString::operator=

; 125  : 	LeaveCriticalSection(&RMS[PipeInstanceNumber].CS);

	imul	eax, DWORD PTR _PipeInstanceNumber$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+144]
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 126  : 	return ret;

	lea	eax, DWORD PTR _ret$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0TZSuperShortString@@QAE@ABV0@@Z	; TZSuperShortString::TZSuperShortString
	mov	ecx, DWORD PTR $T2[ebp]
	or	ecx, 1
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _ret$[ebp]
	call	??1TZSuperShortString@@QAE@XZ		; TZSuperShortString::~TZSuperShortString
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@GetPipeIns:

; 127  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@GetPipeIns
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN10@GetPipeIns:
	DD	1
	DD	$LN9@GetPipeIns
$LN9@GetPipeIns:
	DD	-36					; ffffffdcH
	DD	8
	DD	$LN7@GetPipeIns
$LN7@GetPipeIns:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetPipeInstName@CConnectionServer@@QAE?AVTZSuperShortString@@I@Z$1:
	lea	ecx, DWORD PTR _ret$[ebp]
	jmp	??1TZSuperShortString@@QAE@XZ		; TZSuperShortString::~TZSuperShortString
__ehhandler$?GetPipeInstName@CConnectionServer@@QAE?AVTZSuperShortString@@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetPipeInstName@CConnectionServer@@QAE?AVTZSuperShortString@@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetPipeInstName@CConnectionServer@@QAE?AVTZSuperShortString@@I@Z ENDP ; CConnectionServer::GetPipeInstName
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\connectionserver.cpp
;	COMDAT ?LoadRMOProfile@CConnectionServer@@QAEXIPAVCRMOStoredData@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_PipeInstanceNumber$ = 8				; size = 4
_CRMOSD$ = 12						; size = 4
?LoadRMOProfile@CConnectionServer@@QAEXIPAVCRMOStoredData@@@Z PROC ; CConnectionServer::LoadRMOProfile, COMDAT
; _this$ = ecx

; 105  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 106  : 	if (PipeInstanceNumber>=INSTANCESCOUNT) return;

	cmp	DWORD PTR _PipeInstanceNumber$[ebp], 16	; 00000010H
	jb	SHORT $LN2@LoadRMOPro
	jmp	$LN1@LoadRMOPro
$LN2@LoadRMOPro:

; 107  : 	if (CRMOSD==NULL) 

	cmp	DWORD PTR _CRMOSD$[ebp], 0
	jne	SHORT $LN3@LoadRMOPro

; 108  : 	{
; 109  : 		RMS[PipeInstanceNumber].MustBeDisconnected = true;

	imul	eax, DWORD PTR _PipeInstanceNumber$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+eax+205], 1

; 110  : 		RMS[PipeInstanceNumber].SendCommand(RMCMD_DISCONNECTANDSTAYOFFLINE);

	push	255					; 000000ffH
	imul	eax, DWORD PTR _PipeInstanceNumber$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [ecx+eax+92]
	call	?SendCommand@CRMOSession@@AAEXE@Z	; CRMOSession::SendCommand

; 111  : 		return;

	jmp	SHORT $LN1@LoadRMOPro
$LN3@LoadRMOPro:

; 112  : 	};
; 113  : 	EnterCriticalSection(&RMS[PipeInstanceNumber].CS);

	imul	eax, DWORD PTR _PipeInstanceNumber$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+144]
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 114  : 	RMS[PipeInstanceNumber].CopyFrom(CRMOSD);

	mov	eax, DWORD PTR _CRMOSD$[ebp]
	push	eax
	imul	ecx, DWORD PTR _PipeInstanceNumber$[ebp], 4268
	mov	edx, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [edx+ecx+96]
	call	?CopyFrom@CRMOStoredData@@QAEXPAV1@@Z	; CRMOStoredData::CopyFrom

; 115  : 	LeaveCriticalSection(&RMS[PipeInstanceNumber].CS);

	imul	eax, DWORD PTR _PipeInstanceNumber$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+144]
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 116  : 	CSystemObject::PostSysMessage(SCMD_REGISTEROPERATOR,0, PipeInstanceNumber);

	push	0
	movzx	eax, WORD PTR _PipeInstanceNumber$[ebp]
	push	eax
	push	0
	push	80					; 00000050H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?PostSysMessage@CSystemObject@@IAEXEEGI@Z ; CSystemObject::PostSysMessage
$LN1@LoadRMOPro:

; 117  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?LoadRMOProfile@CConnectionServer@@QAEXIPAVCRMOStoredData@@@Z ENDP ; CConnectionServer::LoadRMOProfile
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\connectionserver.cpp
;	COMDAT ?ReloadRMOProfile@CConnectionServer@@QAEXPAVCRMOStoredData@@@Z
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_this$ = -8						; size = 4
_CRMOSD$ = 8						; size = 4
?ReloadRMOProfile@CConnectionServer@@QAEXPAVCRMOStoredData@@@Z PROC ; CConnectionServer::ReloadRMOProfile, COMDAT
; _this$ = ecx

; 91   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 92   : 	if (CRMOSD==NULL) return;

	cmp	DWORD PTR _CRMOSD$[ebp], 0
	jne	SHORT $LN5@ReloadRMOP
	jmp	$LN1@ReloadRMOP
$LN5@ReloadRMOP:

; 93   : 	for (int i=0; i<INSTANCESCOUNT; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@ReloadRMOP
$LN2@ReloadRMOP:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@ReloadRMOP:
	cmp	DWORD PTR _i$1[ebp], 16			; 00000010H
	jge	SHORT $LN1@ReloadRMOP

; 94   : 	{
; 95   : 		if (RMS[i].RMOUID==CRMOSD->RMOUID)

	imul	eax, DWORD PTR _i$1[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _CRMOSD$[ebp]
	mov	eax, DWORD PTR [ecx+eax+96]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN6@ReloadRMOP

; 96   : 		{
; 97   : 			EnterCriticalSection(&RMS[i].CS);

	imul	eax, DWORD PTR _i$1[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+144]
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 98   : 			RMS[i].CopyFrom(CRMOSD);

	mov	eax, DWORD PTR _CRMOSD$[ebp]
	push	eax
	imul	ecx, DWORD PTR _i$1[ebp], 4268
	mov	edx, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [edx+ecx+96]
	call	?CopyFrom@CRMOStoredData@@QAEXPAV1@@Z	; CRMOStoredData::CopyFrom

; 99   : 			LeaveCriticalSection(&RMS[i].CS);

	imul	eax, DWORD PTR _i$1[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+144]
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@ReloadRMOP:

; 100  : 		};
; 101  : 	};

	jmp	SHORT $LN2@ReloadRMOP
$LN1@ReloadRMOP:

; 102  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ReloadRMOProfile@CConnectionServer@@QAEXPAVCRMOStoredData@@@Z ENDP ; CConnectionServer::ReloadRMOProfile
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\connectionserver.cpp
;	COMDAT ?Execute@CConnectionServer@@UAEXXZ
_TEXT	SEGMENT
_pPipeSD$ = -104					; size = 4
_saPipeSecurity$ = -92					; size = 12
_CurWait$ = -72						; size = 4
_dwWait$ = -60						; size = 4
_i$ = -48						; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
?Execute@CConnectionServer@@UAEXXZ PROC			; CConnectionServer::Execute, COMDAT
; _this$ = ecx

; 30   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Execute@CConnectionServer@@UAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 284				; 0000011cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 71					; 00000047H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 31   : DWORD Res, i, dwWait, CurWait;
; 32   : SECURITY_ATTRIBUTES saPipeSecurity;
; 33   : PSECURITY_DESCRIPTOR pPipeSD = NULL;

	mov	DWORD PTR _pPipeSD$[ebp], 0

; 34   : 
; 35   : 	memset((VOID *)&saPipeSecurity, 0, sizeof(SECURITY_ATTRIBUTES));

	push	12					; 0000000cH
	push	0
	lea	eax, DWORD PTR _saPipeSecurity$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 36   : 	if (!(pPipeSD=(PSECURITY_DESCRIPTOR) (malloc(SECURITY_DESCRIPTOR_MIN_LENGTH)))) ;;

	push	20					; 00000014H
	call	_malloc
	add	esp, 4
	mov	DWORD PTR _pPipeSD$[ebp], eax

; 37   : 	if (!InitializeSecurityDescriptor(pPipeSD, SECURITY_DESCRIPTOR_REVISION)) ;;

	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _pPipeSD$[ebp]
	push	eax
	call	DWORD PTR __imp__InitializeSecurityDescriptor@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 38   : 	if (!SetSecurityDescriptorDacl(pPipeSD, TRUE, (PACL)NULL, FALSE)) ;;

	mov	esi, esp
	push	0
	push	0
	push	1
	mov	eax, DWORD PTR _pPipeSD$[ebp]
	push	eax
	call	DWORD PTR __imp__SetSecurityDescriptorDacl@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 39   : 	saPipeSecurity.nLength    = sizeof (SECURITY_ATTRIBUTES);

	mov	DWORD PTR _saPipeSecurity$[ebp], 12	; 0000000cH

; 40   : 	saPipeSecurity.bInheritHandle  = TRUE;

	mov	DWORD PTR _saPipeSecurity$[ebp+8], 1

; 41   : 	saPipeSecurity.lpSecurityDescriptor = pPipeSD;

	mov	eax, DWORD PTR _pPipeSD$[ebp]
	mov	DWORD PTR _saPipeSecurity$[ebp+4], eax

; 42   : 
; 43   : 	for (i=0; i<INSTANCESCOUNT; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@Execute
$LN2@Execute:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@Execute:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jae	$LN10@Execute
$LN7@Execute:

; 44   : 	{
; 45   : 		for (;;)
; 46   : 		{
; 47   : 			RMS[i].hPipe = CreateNamedPipe(PipeName, PIPE_ACCESS_DUPLEX|FILE_FLAG_OVERLAPPED,

	mov	esi, esp
	lea	eax, DWORD PTR _saPipeSecurity$[ebp]
	push	eax
	push	10000					; 00002710H
	push	10000					; 00002710H
	push	10000					; 00002710H
	push	16					; 00000010H
	push	6
	push	1073741827				; 40000003H
	push	OFFSET ??_C@_0BH@MALIKPOO@?2?2?4?2pipe?2TlgCallCenter?$AA@
	call	DWORD PTR __imp__CreateNamedPipeA@32
	cmp	esi, esp
	call	__RTC_CheckEsp
	imul	ecx, DWORD PTR _i$[ebp], 4268
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+188], eax

; 48   : 					PIPE_TYPE_MESSAGE | PIPE_READMODE_MESSAGE | PIPE_WAIT,
; 49   : 					INSTANCESCOUNT, BUFSIZE, BUFSIZE, PIPE_TIMEOUT, &saPipeSecurity);
; 50   : 			if (RMS[i].hPipe!=INVALID_HANDLE_VALUE) break;

	imul	eax, DWORD PTR _i$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+188], -1
	je	SHORT $LN17@Execute
	jmp	SHORT $LN6@Execute
$LN17@Execute:

; 51   : 			Sleep(100);

	mov	esi, esp
	push	100					; 00000064H
	call	DWORD PTR __imp__Sleep@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 52   : 		};

	jmp	SHORT $LN7@Execute
$LN6@Execute:

; 53   : 		hEvents[i+1] = RMS[i].oOverlap.hEvent;

	imul	eax, DWORD PTR _i$[ebp], 4268
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [esi+eax+184]
	mov	DWORD PTR [edx+ecx*4+28], eax

; 54   : 		RMS[i].InstanceNumber = i;

	imul	eax, DWORD PTR _i$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [ecx+eax+192], edx

; 55   : 		RMS[i].ConnectToNewClient();

	imul	eax, DWORD PTR _i$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [ecx+eax+92]
	call	?ConnectToNewClient@CRMOSession@@AAEXXZ	; CRMOSession::ConnectToNewClient

; 56   : 	};

	jmp	$LN2@Execute
$LN10@Execute:

; 57   : 
; 58   : 	for (;!Terminated;)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	jne	$LN1@Execute

; 59   : 	{
; 60   : 		try

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 61   : 		{
; 62   : 			dwWait = WaitForMultipleObjects(INSTANCESCOUNT+1, hEvents, FALSE, KEEPALIVETIMEOUT/2);

	mov	esi, esp
	push	250					; 000000faH
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	push	17					; 00000011H
	call	DWORD PTR __imp__WaitForMultipleObjects@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwWait$[ebp], eax

; 63   : 
; 64   : 			if (dwWait==WAIT_TIMEOUT)

	cmp	DWORD PTR _dwWait$[ebp], 258		; 00000102H
	jne	SHORT $LN19@Execute
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 65   : 			{
; 66   : 		//		cout << "Check timeouts" << endl;
; 67   : 		//		for (i=0; i<INSTANCESCOUNT; i++) RMS[i].CheckTimeout();
; 68   : 				continue;

	jmp	SHORT $LN10@Execute
$LN19@Execute:

; 69   : 			};
; 70   : 
; 71   : 			CurWait = dwWait - WAIT_OBJECT_0 - 1;

	mov	eax, DWORD PTR _dwWait$[ebp]
	sub	eax, 1
	mov	DWORD PTR _CurWait$[ebp], eax
$LN13@Execute:

; 72   : 			for (;;)
; 73   : 			{
; 74   : 				EnterCriticalSection(&RMS[CurWait].CS);

	imul	eax, DWORD PTR _CurWait$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+144]
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 75   : 				RMS[CurWait].ProcessEvent();

	imul	eax, DWORD PTR _CurWait$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [ecx+eax+92]
	call	?ProcessEvent@CRMOSession@@AAEXXZ	; CRMOSession::ProcessEvent

; 76   : 				LeaveCriticalSection(&RMS[CurWait].CS);

	imul	eax, DWORD PTR _CurWait$[ebp], 4268
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+144]
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 77   : 				if (CurWait==INSTANCESCOUNT-1) break;

	cmp	DWORD PTR _CurWait$[ebp], 15		; 0000000fH
	jne	SHORT $LN20@Execute
	jmp	SHORT $LN12@Execute
$LN20@Execute:

; 78   : 				dwWait = WaitForMultipleObjects(INSTANCESCOUNT-CurWait-1, &hEvents[CurWait+1+1], FALSE, 0);

	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _CurWait$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+32]
	push	edx
	mov	eax, 16					; 00000010H
	sub	eax, DWORD PTR _CurWait$[ebp]
	sub	eax, 1
	push	eax
	call	DWORD PTR __imp__WaitForMultipleObjects@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwWait$[ebp], eax

; 79   : 				if (dwWait==WAIT_TIMEOUT) break;

	cmp	DWORD PTR _dwWait$[ebp], 258		; 00000102H
	jne	SHORT $LN21@Execute
	jmp	SHORT $LN12@Execute
$LN21@Execute:

; 80   : 				CurWait += dwWait - WAIT_OBJECT_0+1;

	mov	eax, DWORD PTR _dwWait$[ebp]
	mov	ecx, DWORD PTR _CurWait$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _CurWait$[ebp], edx

; 81   : 			};

	jmp	$LN13@Execute
$LN12@Execute:

; 82   : 		}

	jmp	SHORT $LN23@Execute
__catch$?Execute@CConnectionServer@@UAEXXZ$0:

; 83   : 		catch (...)
; 84   : 		{
; 85   : 			FLOG << time << "Exception in CConnectionServer" << endl;

	push	OFFSET ?endl@@YAAAVCSysOut@@AAV1@@Z	; endl
	push	OFFSET ??_C@_0BP@GBLNMMBC@Exception?5in?5CConnectionServer?$AA@
	push	OFFSET ?time@@YAAAVCSysOut@@AAV1@@Z	; time
	mov	ecx, OFFSET ?FLOG@@3VCSysOut@@A		; FLOG
	call	??6CSysOut@@QAEAAV0@P6AAAV0@AAV0@@Z@Z	; CSysOut::operator<<
	mov	ecx, eax
	call	??6CSysOut@@QAEAAV0@PBD@Z		; CSysOut::operator<<
	mov	ecx, eax
	call	??6CSysOut@@QAEAAV0@P6AAAV0@AAV0@@Z@Z	; CSysOut::operator<<

; 86   : 		};

	mov	eax, $LN26@Execute
	ret	0
$LN23@Execute:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?Execute@CConnectionServer@@UAEXXZ$1
$LN26@Execute:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?Execute@CConnectionServer@@UAEXXZ$1:

; 87   : 	};

	jmp	$LN10@Execute
$LN1@Execute:

; 88   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN31@Execute
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN31@Execute:
	DD	1
	DD	$LN30@Execute
$LN30@Execute:
	DD	-92					; ffffffa4H
	DD	12					; 0000000cH
	DD	$LN28@Execute
$LN28@Execute:
	DB	115					; 00000073H
	DB	97					; 00000061H
	DB	80					; 00000050H
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	83					; 00000053H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?Execute@CConnectionServer@@UAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-304]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Execute@CConnectionServer@@UAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Execute@CConnectionServer@@UAEXXZ ENDP			; CConnectionServer::Execute
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\connectionserver.cpp
;	COMDAT ??1CConnectionServer@@UAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1CConnectionServer@@UAE@XZ PROC			; CConnectionServer::~CConnectionServer, COMDAT
; _this$ = ecx

; 25   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CConnectionServer@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CConnectionServer@@6B@

; 26   : 	CloseHandle(hEvents[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	esi, esp
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+24]
	push	eax
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 27   : }

	push	OFFSET ??1CRMOSession@@UAE@XZ		; CRMOSession::~CRMOSession
	push	16					; 00000010H
	push	4268					; 000010acH
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 92					; 0000005cH
	push	eax
	call	??_M@YGXPAXIIP6EX0@Z@Z
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CThread@@UAE@XZ			; CThread::~CThread
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CConnectionServer@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CConnectionServer@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CConnectionServer@@UAE@XZ ENDP			; CConnectionServer::~CConnectionServer
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\connectionserver.cpp
;	COMDAT ??0CConnectionServer@@QAE@_N@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_CreateSuspend$ = 8					; size = 1
??0CConnectionServer@@QAE@_N@Z PROC			; CConnectionServer::CConnectionServer, COMDAT
; _this$ = ecx

; 19   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CConnectionServer@@QAE@_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 18   : CConnectionServer::CConnectionServer(bool CreateSuspend) : CThread(CreateSuspend)

	movzx	eax, BYTE PTR _CreateSuspend$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CThread@@QAE@_N@Z			; CThread::CThread
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 19   : {

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CConnectionServer@@6B@
	push	OFFSET ??1CRMOSession@@UAE@XZ		; CRMOSession::~CRMOSession
	push	OFFSET ??0CRMOSession@@QAE@XZ		; CRMOSession::CRMOSession
	push	16					; 00000010H
	push	4268					; 000010acH
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 92					; 0000005cH
	push	eax
	call	??_L@YGXPAXIIP6EX0@Z1@Z

; 20   : 	hEvents[0] = CreateEvent(NULL, FALSE, FALSE, NULL);

	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	call	DWORD PTR __imp__CreateEventA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx+24], eax

; 21   : //	cout << "CConnectionServer=" << this << "-" << (void*)(((char*)this)+sizeof(*this))<< endl;
; 22   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CConnectionServer@@QAE@_N@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CThread@@UAE@XZ			; CThread::~CThread
__ehhandler$??0CConnectionServer@@QAE@_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CConnectionServer@@QAE@_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CConnectionServer@@QAE@_N@Z ENDP			; CConnectionServer::CConnectionServer
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\sysout.h
;	COMDAT ?endl@@YAAAVCSysOut@@AAV1@@Z
_TEXT	SEGMENT
__outs$ = 8						; size = 4
?endl@@YAAAVCSysOut@@AAV1@@Z PROC			; endl, COMDAT

; 59   : inline CSysOut& __cdecl endl(CSysOut& _outs) { return _outs << '\n' << flush; }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	OFFSET ?flush@@YAAAVCSysOut@@AAV1@@Z	; flush
	push	10					; 0000000aH
	mov	ecx, DWORD PTR __outs$[ebp]
	call	??6CSysOut@@QAEAAV0@D@Z			; CSysOut::operator<<
	mov	ecx, eax
	call	??6CSysOut@@QAEAAV0@P6AAAV0@AAV0@@Z@Z	; CSysOut::operator<<
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?endl@@YAAAVCSysOut@@AAV1@@Z ENDP			; endl
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\sysout.h
;	COMDAT ?flush@@YAAAVCSysOut@@AAV1@@Z
_TEXT	SEGMENT
__outs$ = 8						; size = 4
?flush@@YAAAVCSysOut@@AAV1@@Z PROC			; flush, COMDAT

; 58   : inline CSysOut& __cdecl flush(CSysOut& _outs) { return _outs.flush(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR __outs$[ebp]
	call	?flush@CSysOut@@QAEAAV1@XZ		; CSysOut::flush
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?flush@@YAAAVCSysOut@@AAV1@@Z ENDP			; flush
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\sysout.h
;	COMDAT ??6CSysOut@@QAEAAV0@D@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__c$ = 8						; size = 1
??6CSysOut@@QAEAAV0@D@Z PROC				; CSysOut::operator<<, COMDAT
; _this$ = ecx

; 52   : inline  CSysOut& CSysOut::operator<<(char _c) { return operator<<((unsigned char) _c); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR __c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??6CSysOut@@QAEAAV0@E@Z			; CSysOut::operator<<
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??6CSysOut@@QAEAAV0@D@Z ENDP				; CSysOut::operator<<
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\sysout.h
;	COMDAT ??6CSysOut@@QAEAAV0@P6AAAV0@AAV0@@Z@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__f$ = 8						; size = 4
??6CSysOut@@QAEAAV0@P6AAAV0@AAV0@@Z@Z PROC		; CSysOut::operator<<, COMDAT
; _this$ = ecx

; 49   : inline CSysOut& CSysOut::operator<<(CSysOut& (__cdecl * _f)(CSysOut&)) { (*_f)(*this); return *this; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __f$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??6CSysOut@@QAEAAV0@P6AAAV0@AAV0@@Z@Z ENDP		; CSysOut::operator<<
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\connectionserver.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\connectionserver.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
