; Listing generated by Microsoft (R) Optimizing Compiler Version 19.13.26131.1 

	TITLE	C:\Users\smith\Projects\CallCenter\TUIList.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0TUIList@@QAE@XZ				; TUIList::TUIList
PUBLIC	??1TUIList@@QAE@XZ				; TUIList::~TUIList
PUBLIC	?SetSize@TUIList@@QAE_NI@Z			; TUIList::SetSize
PUBLIC	?GetSize@TUIList@@QBEIXZ			; TUIList::GetSize
PUBLIC	?Reset@TUIList@@QAEXXZ				; TUIList::Reset
PUBLIC	?ValueInList@TUIList@@QBE_NI@Z			; TUIList::ValueInList
PUBLIC	??4TUIList@@QAEXABV0@@Z				; TUIList::operator=
PUBLIC	?Add@TUIList@@QAE_NI@Z				; TUIList::Add
PUBLIC	?Delete@TUIList@@QAE_NI@Z			; TUIList::Delete
PUBLIC	?GetIndexFor@TUIList@@QAEHI@Z			; TUIList::GetIndexFor
PUBLIC	??ATUIList@@QAEAAII@Z				; TUIList::operator[]
PUBLIC	??6@YAAAVTBinaryData@@AAV0@AAVTUIList@@@Z	; operator<<
PUBLIC	??5@YAAAVTBinaryData@@AAV0@AAVTUIList@@@Z	; operator>>
PUBLIC	?pr@TUIList@@QAEXXZ				; TUIList::pr
PUBLIC	??ATUIAutoSizeList@@QAEAAII@Z			; TUIAutoSizeList::operator[]
PUBLIC	??0TUI64List@@QAE@XZ				; TUI64List::TUI64List
PUBLIC	??1TUI64List@@QAE@XZ				; TUI64List::~TUI64List
PUBLIC	?SetSize@TUI64List@@QAE_NI@Z			; TUI64List::SetSize
PUBLIC	?GetSize@TUI64List@@QBEIXZ			; TUI64List::GetSize
PUBLIC	?Reset@TUI64List@@QAEXXZ			; TUI64List::Reset
PUBLIC	?ValueInList@TUI64List@@QBE_N_K@Z		; TUI64List::ValueInList
PUBLIC	??4TUI64List@@QAEXABV0@@Z			; TUI64List::operator=
PUBLIC	?Add@TUI64List@@QAE_N_K@Z			; TUI64List::Add
PUBLIC	?Delete@TUI64List@@QAE_NI@Z			; TUI64List::Delete
PUBLIC	??ATUI64List@@QAEAA_KI@Z			; TUI64List::operator[]
PUBLIC	??6@YAAAVTBinaryData@@AAV0@AAVTUI64List@@@Z	; operator<<
PUBLIC	??5@YAAAVTBinaryData@@AAV0@AAVTUI64List@@@Z	; operator>>
PUBLIC	?pr@TUI64List@@QAEXXZ				; TUI64List::pr
PUBLIC	??ATUI64AutoSizeList@@QAEAA_KI@Z		; TUI64AutoSizeList::operator[]
PUBLIC	?Add@TCSUI32DualList@@QAEXII@Z			; TCSUI32DualList::Add
PUBLIC	?Delete@TCSUI32DualList@@QAEXH@Z		; TCSUI32DualList::Delete
PUBLIC	?GetCount@TCSUI32DualList@@QAEHXZ		; TCSUI32DualList::GetCount
PUBLIC	?GetData1@TCSUI32DualList@@QAEIH@Z		; TCSUI32DualList::GetData1
PUBLIC	?GetData2@TCSUI32DualList@@QAEIH@Z		; TCSUI32DualList::GetData2
PUBLIC	?GetIndexForD1@TCSUI32DualList@@QAEHI@Z		; TCSUI32DualList::GetIndexForD1
PUBLIC	?GetIndexForD2@TCSUI32DualList@@QAEHI@Z		; TCSUI32DualList::GetIndexForD2
PUBLIC	?SetData2@TCSUI32DualList@@QAEXHI@Z		; TCSUI32DualList::SetData2
PUBLIC	??0TCSEVUI32Queue@@QAE@XZ			; TCSEVUI32Queue::TCSEVUI32Queue
PUBLIC	??1TCSEVUI32Queue@@QAE@XZ			; TCSEVUI32Queue::~TCSEVUI32Queue
PUBLIC	?GetEventHandle@TCSEVUI32Queue@@QAEPAXXZ	; TCSEVUI32Queue::GetEventHandle
PUBLIC	?WaitForNewItem@TCSEVUI32Queue@@QAEKK@Z		; TCSEVUI32Queue::WaitForNewItem
PUBLIC	?IsEmpty@TCSEVUI32Queue@@QAE_NXZ		; TCSEVUI32Queue::IsEmpty
PUBLIC	?Push@TCSEVUI32Queue@@QAEXI@Z			; TCSEVUI32Queue::Push
PUBLIC	?Pop@TCSEVUI32Queue@@QAEIXZ			; TCSEVUI32Queue::Pop
PUBLIC	?Peek@TCSEVUI32Queue@@QAEIXZ			; TCSEVUI32Queue::Peek
PUBLIC	?Reset@TCSEVUI32Queue@@QAEXXZ			; TCSEVUI32Queue::Reset
PUBLIC	??0TCSEVUI64Queue@@QAE@XZ			; TCSEVUI64Queue::TCSEVUI64Queue
PUBLIC	??1TCSEVUI64Queue@@QAE@XZ			; TCSEVUI64Queue::~TCSEVUI64Queue
PUBLIC	?GetEventHandle@TCSEVUI64Queue@@QAEPAXXZ	; TCSEVUI64Queue::GetEventHandle
PUBLIC	?WaitForNewItem@TCSEVUI64Queue@@QAEKK@Z		; TCSEVUI64Queue::WaitForNewItem
PUBLIC	?IsEmpty@TCSEVUI64Queue@@QAE_NXZ		; TCSEVUI64Queue::IsEmpty
PUBLIC	?Push@TCSEVUI64Queue@@QAEX_K@Z			; TCSEVUI64Queue::Push
PUBLIC	?Pop@TCSEVUI64Queue@@QAE_KXZ			; TCSEVUI64Queue::Pop
PUBLIC	?Peek@TCSEVUI64Queue@@QAE_KXZ			; TCSEVUI64Queue::Peek
PUBLIC	?Reset@TCSEVUI64Queue@@QAEXXZ			; TCSEVUI64Queue::Reset
PUBLIC	__TI1?AVCEBadIndex@TUIList@@
PUBLIC	__CTA1?AVCEBadIndex@TUIList@@
PUBLIC	??_R0?AVCEBadIndex@TUIList@@@8			; TUIList::CEBadIndex `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVCEBadIndex@TUIList@@@81
PUBLIC	__TI1?AVCEBadIndex@TUI64List@@
PUBLIC	__CTA1?AVCEBadIndex@TUI64List@@
PUBLIC	??_R0?AVCEBadIndex@TUI64List@@@8		; TUI64List::CEBadIndex `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVCEBadIndex@TUI64List@@@81
PUBLIC	__TI1?AVEQueueEmpty@TCSEVUI32Queue@@
PUBLIC	__CTA1?AVEQueueEmpty@TCSEVUI32Queue@@
PUBLIC	??_R0?AVEQueueEmpty@TCSEVUI32Queue@@@8		; TCSEVUI32Queue::EQueueEmpty `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVEQueueEmpty@TCSEVUI32Queue@@@81
PUBLIC	__TI1?AVEQueueEmpty@TCSEVUI64Queue@@
PUBLIC	__CTA1?AVEQueueEmpty@TCSEVUI64Queue@@
PUBLIC	??_R0?AVEQueueEmpty@TCSEVUI64Queue@@@8		; TCSEVUI64Queue::EQueueEmpty `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVEQueueEmpty@TCSEVUI64Queue@@@81
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__InitializeCriticalSection@4:PROC
EXTRN	__imp__EnterCriticalSection@4:PROC
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	__imp__DeleteCriticalSection@4:PROC
EXTRN	__imp__SetEvent@4:PROC
EXTRN	__imp__ResetEvent@4:PROC
EXTRN	__imp__WaitForSingleObject@8:PROC
EXTRN	__imp__CreateEventA@16:PROC
EXTRN	?WriteDataFrom@TBinaryData@@QAEXPAXI@Z:PROC	; TBinaryData::WriteDataFrom
EXTRN	?ReadDataTo@TBinaryData@@QAEXPAXI@Z:PROC	; TBinaryData::ReadDataTo
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__allshl:PROC
EXTRN	__aullshr:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT __CT??_R0?AVEQueueEmpty@TCSEVUI64Queue@@@81
xdata$x	SEGMENT
__CT??_R0?AVEQueueEmpty@TCSEVUI64Queue@@@81 DD 00H
	DD	FLAT:??_R0?AVEQueueEmpty@TCSEVUI64Queue@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	01H
	DD	00H
xdata$x	ENDS
;	COMDAT ??_R0?AVEQueueEmpty@TCSEVUI64Queue@@@8
data$r	SEGMENT
??_R0?AVEQueueEmpty@TCSEVUI64Queue@@@8 DD FLAT:??_7type_info@@6B@ ; TCSEVUI64Queue::EQueueEmpty `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVEQueueEmpty@TCSEVUI64Queue@@', 00H
data$r	ENDS
;	COMDAT __CTA1?AVEQueueEmpty@TCSEVUI64Queue@@
xdata$x	SEGMENT
__CTA1?AVEQueueEmpty@TCSEVUI64Queue@@ DD 01H
	DD	FLAT:__CT??_R0?AVEQueueEmpty@TCSEVUI64Queue@@@81
xdata$x	ENDS
;	COMDAT __TI1?AVEQueueEmpty@TCSEVUI64Queue@@
xdata$x	SEGMENT
__TI1?AVEQueueEmpty@TCSEVUI64Queue@@ DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA1?AVEQueueEmpty@TCSEVUI64Queue@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVEQueueEmpty@TCSEVUI32Queue@@@81
xdata$x	SEGMENT
__CT??_R0?AVEQueueEmpty@TCSEVUI32Queue@@@81 DD 00H
	DD	FLAT:??_R0?AVEQueueEmpty@TCSEVUI32Queue@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	01H
	DD	00H
xdata$x	ENDS
;	COMDAT ??_R0?AVEQueueEmpty@TCSEVUI32Queue@@@8
data$r	SEGMENT
??_R0?AVEQueueEmpty@TCSEVUI32Queue@@@8 DD FLAT:??_7type_info@@6B@ ; TCSEVUI32Queue::EQueueEmpty `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVEQueueEmpty@TCSEVUI32Queue@@', 00H
data$r	ENDS
;	COMDAT __CTA1?AVEQueueEmpty@TCSEVUI32Queue@@
xdata$x	SEGMENT
__CTA1?AVEQueueEmpty@TCSEVUI32Queue@@ DD 01H
	DD	FLAT:__CT??_R0?AVEQueueEmpty@TCSEVUI32Queue@@@81
xdata$x	ENDS
;	COMDAT __TI1?AVEQueueEmpty@TCSEVUI32Queue@@
xdata$x	SEGMENT
__TI1?AVEQueueEmpty@TCSEVUI32Queue@@ DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA1?AVEQueueEmpty@TCSEVUI32Queue@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVCEBadIndex@TUI64List@@@81
xdata$x	SEGMENT
__CT??_R0?AVCEBadIndex@TUI64List@@@81 DD 00H
	DD	FLAT:??_R0?AVCEBadIndex@TUI64List@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	01H
	DD	00H
xdata$x	ENDS
;	COMDAT ??_R0?AVCEBadIndex@TUI64List@@@8
data$r	SEGMENT
??_R0?AVCEBadIndex@TUI64List@@@8 DD FLAT:??_7type_info@@6B@ ; TUI64List::CEBadIndex `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCEBadIndex@TUI64List@@', 00H
data$r	ENDS
;	COMDAT __CTA1?AVCEBadIndex@TUI64List@@
xdata$x	SEGMENT
__CTA1?AVCEBadIndex@TUI64List@@ DD 01H
	DD	FLAT:__CT??_R0?AVCEBadIndex@TUI64List@@@81
xdata$x	ENDS
;	COMDAT __TI1?AVCEBadIndex@TUI64List@@
xdata$x	SEGMENT
__TI1?AVCEBadIndex@TUI64List@@ DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA1?AVCEBadIndex@TUI64List@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVCEBadIndex@TUIList@@@81
xdata$x	SEGMENT
__CT??_R0?AVCEBadIndex@TUIList@@@81 DD 00H
	DD	FLAT:??_R0?AVCEBadIndex@TUIList@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	01H
	DD	00H
xdata$x	ENDS
;	COMDAT ??_R0?AVCEBadIndex@TUIList@@@8
data$r	SEGMENT
??_R0?AVCEBadIndex@TUIList@@@8 DD FLAT:??_7type_info@@6B@ ; TUIList::CEBadIndex `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCEBadIndex@TUIList@@', 00H
data$r	ENDS
;	COMDAT __CTA1?AVCEBadIndex@TUIList@@
xdata$x	SEGMENT
__CTA1?AVCEBadIndex@TUIList@@ DD 01H
	DD	FLAT:__CT??_R0?AVCEBadIndex@TUIList@@@81
xdata$x	ENDS
;	COMDAT __TI1?AVCEBadIndex@TUIList@@
xdata$x	SEGMENT
__TI1?AVCEBadIndex@TUIList@@ DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA1?AVCEBadIndex@TUIList@@
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ?Reset@TCSEVUI64Queue@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Reset@TCSEVUI64Queue@@QAEXXZ PROC			; TCSEVUI64Queue::Reset, COMDAT
; _this$ = ecx

; 499  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 500  : 	EnterCriticalSection(&CS);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 501  : 	TUI64List::Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@TUI64List@@QAEXXZ		; TUI64List::Reset

; 502  : 	LeaveCriticalSection(&CS);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 503  : 	ResetEvent(hEvent);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__ResetEvent@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 504  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@TCSEVUI64Queue@@QAEXXZ ENDP			; TCSEVUI64Queue::Reset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ?Peek@TCSEVUI64Queue@@QAE_KXZ
_TEXT	SEGMENT
$T1 = -225						; size = 1
_ret$ = -24						; size = 8
_this$ = -8						; size = 4
?Peek@TCSEVUI64Queue@@QAE_KXZ PROC			; TCSEVUI64Queue::Peek, COMDAT
; _this$ = ecx

; 489  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 490  : 	if (IsEmpty()) throw EQueueEmpty();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmpty@TCSEVUI64Queue@@QAE_NXZ	; TCSEVUI64Queue::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@Peek
	push	OFFSET __TI1?AVEQueueEmpty@TCSEVUI64Queue@@
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Peek:

; 491  : unsigned __int64 ret;
; 492  : 	EnterCriticalSection(&CS);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 493  : 	ret = TUI64List::operator [](0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ATUI64List@@QAEAA_KI@Z		; TUI64List::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ret$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _ret$[ebp+4], edx

; 494  : 	LeaveCriticalSection(&CS);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 495  : 	return ret;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _ret$[ebp+4]
$LN3@Peek:

; 496  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Peek@TCSEVUI64Queue@@QAE_KXZ ENDP			; TCSEVUI64Queue::Peek
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ?Pop@TCSEVUI64Queue@@QAE_KXZ
_TEXT	SEGMENT
_ret$ = -24						; size = 8
_this$ = -8						; size = 4
?Pop@TCSEVUI64Queue@@QAE_KXZ PROC			; TCSEVUI64Queue::Pop, COMDAT
; _this$ = ecx

; 477  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 478  : 	if (IsEmpty()) return 0;// throw EQueueEmpty();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmpty@TCSEVUI64Queue@@QAE_NXZ	; TCSEVUI64Queue::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@Pop
	xor	eax, eax
	xor	edx, edx
	jmp	SHORT $LN1@Pop
$LN2@Pop:

; 479  : unsigned __int64 ret;
; 480  : 	EnterCriticalSection(&CS);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 481  : 	ret = TUI64List::operator [](0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ATUI64List@@QAEAA_KI@Z		; TUI64List::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ret$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _ret$[ebp+4], edx

; 482  : 	TUI64List::Delete(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Delete@TUI64List@@QAE_NI@Z		; TUI64List::Delete

; 483  : 	if (TUI64List::GetSize()==0) ResetEvent(hEvent);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSize@TUI64List@@QBEIXZ		; TUI64List::GetSize
	test	eax, eax
	jne	SHORT $LN3@Pop
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__ResetEvent@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@Pop:

; 484  : 	LeaveCriticalSection(&CS);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 485  : 	return ret;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _ret$[ebp+4]
$LN1@Pop:

; 486  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Pop@TCSEVUI64Queue@@QAE_KXZ ENDP			; TCSEVUI64Queue::Pop
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ?Push@TCSEVUI64Queue@@QAEX_K@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_k$ = 8							; size = 8
?Push@TCSEVUI64Queue@@QAEX_K@Z PROC			; TCSEVUI64Queue::Push, COMDAT
; _this$ = ecx

; 469  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 470  : 	EnterCriticalSection(&CS);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 471  : 	TUI64List::Add(k);

	mov	eax, DWORD PTR _k$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@TUI64List@@QAE_N_K@Z		; TUI64List::Add

; 472  : 	LeaveCriticalSection(&CS);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 473  : 	SetEvent(hEvent);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__SetEvent@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 474  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Push@TCSEVUI64Queue@@QAEX_K@Z ENDP			; TCSEVUI64Queue::Push
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ?IsEmpty@TCSEVUI64Queue@@QAE_NXZ
_TEXT	SEGMENT
tv73 = -220						; size = 4
_ret$ = -17						; size = 1
_this$ = -8						; size = 4
?IsEmpty@TCSEVUI64Queue@@QAE_NXZ PROC			; TCSEVUI64Queue::IsEmpty, COMDAT
; _this$ = ecx

; 460  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 461  : bool ret;
; 462  : 	EnterCriticalSection(&CS);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 463  : 	ret = TUI64List::GetSize()==0;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSize@TUI64List@@QBEIXZ		; TUI64List::GetSize
	test	eax, eax
	jne	SHORT $LN3@IsEmpty
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN4@IsEmpty
$LN3@IsEmpty:
	mov	DWORD PTR tv73[ebp], 0
$LN4@IsEmpty:
	mov	al, BYTE PTR tv73[ebp]
	mov	BYTE PTR _ret$[ebp], al

; 464  : 	LeaveCriticalSection(&CS);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 465  : 	return ret;

	mov	al, BYTE PTR _ret$[ebp]

; 466  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@TCSEVUI64Queue@@QAE_NXZ ENDP			; TCSEVUI64Queue::IsEmpty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ?WaitForNewItem@TCSEVUI64Queue@@QAEKK@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_timeout$ = 8						; size = 4
?WaitForNewItem@TCSEVUI64Queue@@QAEKK@Z PROC		; TCSEVUI64Queue::WaitForNewItem, COMDAT
; _this$ = ecx

; 455  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 456  : 	return WaitForSingleObject(hEvent, timeout);

	mov	esi, esp
	mov	eax, DWORD PTR _timeout$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__WaitForSingleObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 457  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?WaitForNewItem@TCSEVUI64Queue@@QAEKK@Z ENDP		; TCSEVUI64Queue::WaitForNewItem
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ?GetEventHandle@TCSEVUI64Queue@@QAEPAXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetEventHandle@TCSEVUI64Queue@@QAEPAXXZ PROC		; TCSEVUI64Queue::GetEventHandle, COMDAT
; _this$ = ecx

; 450  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 451  : 	return hEvent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]

; 452  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetEventHandle@TCSEVUI64Queue@@QAEPAXXZ ENDP		; TCSEVUI64Queue::GetEventHandle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ??1TCSEVUI64Queue@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1TCSEVUI64Queue@@QAE@XZ PROC				; TCSEVUI64Queue::~TCSEVUI64Queue, COMDAT
; _this$ = ecx

; 444  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 445  : 	CloseHandle(hEvent);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 446  : 	DeleteCriticalSection(&CS);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__DeleteCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 447  : };

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TUI64List@@QAE@XZ			; TUI64List::~TUI64List
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1TCSEVUI64Queue@@QAE@XZ ENDP				; TCSEVUI64Queue::~TCSEVUI64Queue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ??0TCSEVUI64Queue@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0TCSEVUI64Queue@@QAE@XZ PROC				; TCSEVUI64Queue::TCSEVUI64Queue, COMDAT
; _this$ = ecx

; 437  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0TUI64List@@QAE@XZ			; TUI64List::TUI64List

; 438  : 	hEvent = CreateEvent(NULL, TRUE, FALSE, NULL);

	mov	esi, esp
	push	0
	push	0
	push	1
	push	0
	call	DWORD PTR __imp__CreateEventA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 439  : 	InitializeCriticalSection(&CS);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__InitializeCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 440  : //	cout << "TCSEVUI64Queue=" << this << "-" << (void*)(((char*)this)+sizeof(*this))<< endl;
; 441  : };

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0TCSEVUI64Queue@@QAE@XZ ENDP				; TCSEVUI64Queue::TCSEVUI64Queue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ?Reset@TCSEVUI32Queue@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Reset@TCSEVUI32Queue@@QAEXXZ PROC			; TCSEVUI32Queue::Reset, COMDAT
; _this$ = ecx

; 427  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 428  : 	EnterCriticalSection(&CS);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 429  : 	TUIList::Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@TUIList@@QAEXXZ			; TUIList::Reset

; 430  : 	LeaveCriticalSection(&CS);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 431  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@TCSEVUI32Queue@@QAEXXZ ENDP			; TCSEVUI32Queue::Reset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ?Peek@TCSEVUI32Queue@@QAEIXZ
_TEXT	SEGMENT
$T1 = -221						; size = 1
_ret$ = -20						; size = 4
_this$ = -8						; size = 4
?Peek@TCSEVUI32Queue@@QAEIXZ PROC			; TCSEVUI32Queue::Peek, COMDAT
; _this$ = ecx

; 417  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 418  : 	if (IsEmpty()) throw EQueueEmpty();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmpty@TCSEVUI32Queue@@QAE_NXZ	; TCSEVUI32Queue::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@Peek
	push	OFFSET __TI1?AVEQueueEmpty@TCSEVUI32Queue@@
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Peek:

; 419  : unsigned __int32 ret;
; 420  : 	EnterCriticalSection(&CS);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 421  : 	ret = TUIList::operator [](0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ATUIList@@QAEAAII@Z			; TUIList::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _ret$[ebp], eax

; 422  : 	LeaveCriticalSection(&CS);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 423  : 	return ret;

	mov	eax, DWORD PTR _ret$[ebp]
$LN3@Peek:

; 424  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Peek@TCSEVUI32Queue@@QAEIXZ ENDP			; TCSEVUI32Queue::Peek
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ?Pop@TCSEVUI32Queue@@QAEIXZ
_TEXT	SEGMENT
$T1 = -221						; size = 1
_ret$ = -20						; size = 4
_this$ = -8						; size = 4
?Pop@TCSEVUI32Queue@@QAEIXZ PROC			; TCSEVUI32Queue::Pop, COMDAT
; _this$ = ecx

; 406  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 407  : 	if (IsEmpty()) throw EQueueEmpty();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmpty@TCSEVUI32Queue@@QAE_NXZ	; TCSEVUI32Queue::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@Pop
	push	OFFSET __TI1?AVEQueueEmpty@TCSEVUI32Queue@@
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Pop:

; 408  : unsigned __int32 ret;
; 409  : 	EnterCriticalSection(&CS);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 410  : 	ret = TUIList::operator [](0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ATUIList@@QAEAAII@Z			; TUIList::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _ret$[ebp], eax

; 411  : 	TUIList::Delete(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Delete@TUIList@@QAE_NI@Z		; TUIList::Delete

; 412  : 	LeaveCriticalSection(&CS);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 413  : 	return ret;

	mov	eax, DWORD PTR _ret$[ebp]
$LN3@Pop:

; 414  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Pop@TCSEVUI32Queue@@QAEIXZ ENDP			; TCSEVUI32Queue::Pop
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ?Push@TCSEVUI32Queue@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_k$ = 8							; size = 4
?Push@TCSEVUI32Queue@@QAEXI@Z PROC			; TCSEVUI32Queue::Push, COMDAT
; _this$ = ecx

; 399  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 400  : 	EnterCriticalSection(&CS);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 401  : 	TUIList::Add(k);

	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@TUIList@@QAE_NI@Z			; TUIList::Add

; 402  : 	LeaveCriticalSection(&CS);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 403  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Push@TCSEVUI32Queue@@QAEXI@Z ENDP			; TCSEVUI32Queue::Push
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ?IsEmpty@TCSEVUI32Queue@@QAE_NXZ
_TEXT	SEGMENT
tv73 = -220						; size = 4
_ret$ = -17						; size = 1
_this$ = -8						; size = 4
?IsEmpty@TCSEVUI32Queue@@QAE_NXZ PROC			; TCSEVUI32Queue::IsEmpty, COMDAT
; _this$ = ecx

; 390  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 391  : bool ret;
; 392  : 	EnterCriticalSection(&CS);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 393  : 	ret = TUIList::GetSize()==0;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSize@TUIList@@QBEIXZ		; TUIList::GetSize
	test	eax, eax
	jne	SHORT $LN3@IsEmpty
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN4@IsEmpty
$LN3@IsEmpty:
	mov	DWORD PTR tv73[ebp], 0
$LN4@IsEmpty:
	mov	al, BYTE PTR tv73[ebp]
	mov	BYTE PTR _ret$[ebp], al

; 394  : 	LeaveCriticalSection(&CS);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 395  : 	return ret;

	mov	al, BYTE PTR _ret$[ebp]

; 396  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@TCSEVUI32Queue@@QAE_NXZ ENDP			; TCSEVUI32Queue::IsEmpty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ?WaitForNewItem@TCSEVUI32Queue@@QAEKK@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_timeout$ = 8						; size = 4
?WaitForNewItem@TCSEVUI32Queue@@QAEKK@Z PROC		; TCSEVUI32Queue::WaitForNewItem, COMDAT
; _this$ = ecx

; 385  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 386  : 	return WaitForSingleObject(hEvent, timeout);

	mov	esi, esp
	mov	eax, DWORD PTR _timeout$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__WaitForSingleObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 387  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?WaitForNewItem@TCSEVUI32Queue@@QAEKK@Z ENDP		; TCSEVUI32Queue::WaitForNewItem
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ?GetEventHandle@TCSEVUI32Queue@@QAEPAXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetEventHandle@TCSEVUI32Queue@@QAEPAXXZ PROC		; TCSEVUI32Queue::GetEventHandle, COMDAT
; _this$ = ecx

; 380  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 381  : 	return hEvent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]

; 382  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetEventHandle@TCSEVUI32Queue@@QAEPAXXZ ENDP		; TCSEVUI32Queue::GetEventHandle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ??1TCSEVUI32Queue@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1TCSEVUI32Queue@@QAE@XZ PROC				; TCSEVUI32Queue::~TCSEVUI32Queue, COMDAT
; _this$ = ecx

; 374  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 375  : 	CloseHandle(hEvent);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 376  : 	DeleteCriticalSection(&CS);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__DeleteCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 377  : };

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TUIList@@QAE@XZ			; TUIList::~TUIList
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1TCSEVUI32Queue@@QAE@XZ ENDP				; TCSEVUI32Queue::~TCSEVUI32Queue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ??0TCSEVUI32Queue@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0TCSEVUI32Queue@@QAE@XZ PROC				; TCSEVUI32Queue::TCSEVUI32Queue, COMDAT
; _this$ = ecx

; 367  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0TUIList@@QAE@XZ			; TUIList::TUIList

; 368  : 	hEvent = CreateEvent(NULL, TRUE, FALSE, NULL);

	mov	esi, esp
	push	0
	push	0
	push	1
	push	0
	call	DWORD PTR __imp__CreateEventA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 369  : 	InitializeCriticalSection(&CS);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__InitializeCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 370  : //	cout << "TCSEVUI32Queue=" << this << "-" << (void*)(((char*)this)+sizeof(*this))<< endl;
; 371  : };

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0TCSEVUI32Queue@@QAE@XZ ENDP				; TCSEVUI32Queue::TCSEVUI32Queue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ?SetData2@TCSUI32DualList@@QAEXHI@Z
_TEXT	SEGMENT
_data$ = -24						; size = 8
_this$ = -8						; size = 4
_index$ = 8						; size = 4
_val$ = 12						; size = 4
?SetData2@TCSUI32DualList@@QAEXHI@Z PROC		; TCSUI32DualList::SetData2, COMDAT
; _this$ = ecx

; 356  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 357  : unsigned __int64 data;
; 358  : 
; 359  : 	data = (*this)[index];

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ATUI64List@@QAEAA_KI@Z		; TUI64List::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _data$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _data$[ebp+4], edx

; 360  : 	data = (data & 0xFFFFFFFF00000000) | val;

	mov	eax, DWORD PTR _data$[ebp]
	and	eax, 0
	mov	ecx, DWORD PTR _data$[ebp+4]
	xor	edx, edx
	or	eax, DWORD PTR _val$[ebp]
	or	ecx, edx
	mov	DWORD PTR _data$[ebp], eax
	mov	DWORD PTR _data$[ebp+4], ecx

; 361  : 	(*this)[index] = data;

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ATUI64List@@QAEAA_KI@Z		; TUI64List::operator[]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _data$[ebp+4]
	mov	DWORD PTR [eax+4], edx

; 362  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetData2@TCSUI32DualList@@QAEXHI@Z ENDP		; TCSUI32DualList::SetData2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ?GetIndexForD2@TCSUI32DualList@@QAEHI@Z
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_this$ = -8						; size = 4
_val$ = 8						; size = 4
?GetIndexForD2@TCSUI32DualList@@QAEHI@Z PROC		; TCSUI32DualList::GetIndexForD2, COMDAT
; _this$ = ecx

; 349  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 	for (int i=0; i<GetCount(); i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@GetIndexFo
$LN2@GetIndexFo:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@GetIndexFo:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCount@TCSUI32DualList@@QAEHXZ	; TCSUI32DualList::GetCount
	cmp	DWORD PTR _i$1[ebp], eax
	jge	SHORT $LN3@GetIndexFo

; 351  : 		if (GetData2(i)==val) return i;

	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData2@TCSUI32DualList@@QAEIH@Z	; TCSUI32DualList::GetData2
	cmp	eax, DWORD PTR _val$[ebp]
	jne	SHORT $LN5@GetIndexFo
	mov	eax, DWORD PTR _i$1[ebp]
	jmp	SHORT $LN1@GetIndexFo
$LN5@GetIndexFo:

; 352  : 	return -1;

	jmp	SHORT $LN2@GetIndexFo
$LN3@GetIndexFo:
	or	eax, -1
$LN1@GetIndexFo:

; 353  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetIndexForD2@TCSUI32DualList@@QAEHI@Z ENDP		; TCSUI32DualList::GetIndexForD2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ?GetIndexForD1@TCSUI32DualList@@QAEHI@Z
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_this$ = -8						; size = 4
_val$ = 8						; size = 4
?GetIndexForD1@TCSUI32DualList@@QAEHI@Z PROC		; TCSUI32DualList::GetIndexForD1, COMDAT
; _this$ = ecx

; 342  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 343  : 	for (int i=0; i<GetCount(); i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@GetIndexFo
$LN2@GetIndexFo:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@GetIndexFo:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCount@TCSUI32DualList@@QAEHXZ	; TCSUI32DualList::GetCount
	cmp	DWORD PTR _i$1[ebp], eax
	jge	SHORT $LN3@GetIndexFo

; 344  : 		if (GetData1(i)==val) return i;

	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData1@TCSUI32DualList@@QAEIH@Z	; TCSUI32DualList::GetData1
	cmp	eax, DWORD PTR _val$[ebp]
	jne	SHORT $LN5@GetIndexFo
	mov	eax, DWORD PTR _i$1[ebp]
	jmp	SHORT $LN1@GetIndexFo
$LN5@GetIndexFo:

; 345  : 	return -1;

	jmp	SHORT $LN2@GetIndexFo
$LN3@GetIndexFo:
	or	eax, -1
$LN1@GetIndexFo:

; 346  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetIndexForD1@TCSUI32DualList@@QAEHI@Z ENDP		; TCSUI32DualList::GetIndexForD1
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ?GetData2@TCSUI32DualList@@QAEIH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_index$ = 8						; size = 4
?GetData2@TCSUI32DualList@@QAEIH@Z PROC			; TCSUI32DualList::GetData2, COMDAT
; _this$ = ecx

; 337  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 338  : 	return (unsigned __int32)(((*this)[index]) & 0xFFFFFFFF);

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ATUI64List@@QAEAA_KI@Z		; TUI64List::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	and	edx, 0
	mov	eax, ecx

; 339  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetData2@TCSUI32DualList@@QAEIH@Z ENDP			; TCSUI32DualList::GetData2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ?GetData1@TCSUI32DualList@@QAEIH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_index$ = 8						; size = 4
?GetData1@TCSUI32DualList@@QAEIH@Z PROC			; TCSUI32DualList::GetData1, COMDAT
; _this$ = ecx

; 332  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 333  : 	return (unsigned __int32)(((*this)[index]) >> 32);

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ATUI64List@@QAEAA_KI@Z		; TUI64List::operator[]
	mov	ecx, eax
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	cl, 32					; 00000020H
	call	__aullshr

; 334  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetData1@TCSUI32DualList@@QAEIH@Z ENDP			; TCSUI32DualList::GetData1
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ?GetCount@TCSUI32DualList@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetCount@TCSUI32DualList@@QAEHXZ PROC			; TCSUI32DualList::GetCount, COMDAT
; _this$ = ecx

; 327  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 328  : 	return TUI64List::GetSize();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSize@TUI64List@@QBEIXZ		; TUI64List::GetSize

; 329  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCount@TCSUI32DualList@@QAEHXZ ENDP			; TCSUI32DualList::GetCount
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ?Delete@TCSUI32DualList@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_index$ = 8						; size = 4
?Delete@TCSUI32DualList@@QAEXH@Z PROC			; TCSUI32DualList::Delete, COMDAT
; _this$ = ecx

; 322  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 323  : 	TUI64List::Delete(index);

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Delete@TUI64List@@QAE_NI@Z		; TUI64List::Delete

; 324  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Delete@TCSUI32DualList@@QAEXH@Z ENDP			; TCSUI32DualList::Delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ?Add@TCSUI32DualList@@QAEXII@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_data1$ = 8						; size = 4
_data2$ = 12						; size = 4
?Add@TCSUI32DualList@@QAEXII@Z PROC			; TCSUI32DualList::Add, COMDAT
; _this$ = ecx

; 317  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 318  : 	TUI64List::Add((((unsigned __int64)data1)<<32)|data2);

	xor	edx, edx
	mov	eax, DWORD PTR _data1$[ebp]
	mov	cl, 32					; 00000020H
	call	__allshl
	xor	ecx, ecx
	or	eax, DWORD PTR _data2$[ebp]
	or	edx, ecx
	push	edx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@TUI64List@@QAE_N_K@Z		; TUI64List::Add

; 319  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Add@TCSUI32DualList@@QAEXII@Z ENDP			; TCSUI32DualList::Add
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ??ATUI64AutoSizeList@@QAEAA_KI@Z
_TEXT	SEGMENT
tv129 = -244						; size = 4
$T1 = -236						; size = 4
$T2 = -224						; size = 4
_OldList$ = -20						; size = 4
_this$ = -8						; size = 4
_k$ = 8							; size = 4
??ATUI64AutoSizeList@@QAEAA_KI@Z PROC			; TUI64AutoSizeList::operator[], COMDAT
; _this$ = ecx

; 302  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 303  : 	if (k<size) return List[k];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN2@operator
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _k$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	jmp	$LN1@operator
$LN2@operator:

; 304  : unsigned __int64 *OldList = List;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _OldList$[ebp], ecx

; 305  : 	List = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 306  : 	RealSize = ((k+1)/__TUIList_BLSZ+((k+1)%__TUIList_BLSZ==0?0:1))*__TUIList_BLSZ;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	xor	edx, edx
	mov	ecx, 30					; 0000001eH
	div	ecx
	test	edx, edx
	jne	SHORT $LN4@operator
	mov	DWORD PTR tv129[ebp], 0
	jmp	SHORT $LN5@operator
$LN4@operator:
	mov	DWORD PTR tv129[ebp], 1
$LN5@operator:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	xor	edx, edx
	mov	ecx, 30					; 0000001eH
	div	ecx
	add	eax, DWORD PTR tv129[ebp]
	imul	edx, eax, 30
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 307  : 	List = new unsigned __int64[RealSize];

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [eax], ecx

; 308  : 	memcpy(&List[0], &OldList[0], size*sizeof(unsigned __int64));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 3
	push	ecx
	mov	edx, 8
	imul	eax, edx, 0
	add	eax, DWORD PTR _OldList$[ebp]
	push	eax
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 309  : 	delete[] OldList;

	mov	eax, DWORD PTR _OldList$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 310  : 	memset(&List[size], 0, (k-size)*sizeof(unsigned __int64));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, DWORD PTR [eax+4]
	shl	ecx, 3
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [edx+eax*8]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 311  : 	size=k+1;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 312  : 	return List[k];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _k$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
$LN1@operator:

; 313  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??ATUI64AutoSizeList@@QAEAA_KI@Z ENDP			; TUI64AutoSizeList::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ?pr@TUI64List@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?pr@TUI64List@@QAEXXZ PROC				; TUI64List::pr, COMDAT
; _this$ = ecx

; 294  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 295  : //	cout << (unsigned)size << ":" << (unsigned)RealSize << "  ";
; 296  : //	for (int i=0; i<RealSize; i++)
; 297  : //		cout << (unsigned)List[i] << " ";
; 298  : //	cout << endl;
; 299  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?pr@TUI64List@@QAEXXZ ENDP				; TUI64List::pr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ??5@YAAAVTBinaryData@@AAV0@AAVTUI64List@@@Z
_TEXT	SEGMENT
_size$ = -8						; size = 4
_s$ = 8							; size = 4
_Value$ = 12						; size = 4
??5@YAAAVTBinaryData@@AAV0@AAVTUI64List@@@Z PROC	; operator>>, COMDAT

; 262  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 263  : 	Value.Reset();

	mov	ecx, DWORD PTR _Value$[ebp]
	call	?Reset@TUI64List@@QAEXXZ		; TUI64List::Reset

; 264  : unsigned __int32 size;
; 265  : 	s.ReadDataTo((void *)&size, sizeof(unsigned int));

	push	4
	lea	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	call	?ReadDataTo@TBinaryData@@QAEXPAXI@Z	; TBinaryData::ReadDataTo

; 266  : 	Value.SetSize(size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Value$[ebp]
	call	?SetSize@TUI64List@@QAE_NI@Z		; TUI64List::SetSize

; 267  : 	s.ReadDataTo((void *)Value.List, Value.size*sizeof(unsigned __int64));

	mov	eax, DWORD PTR _Value$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _Value$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	call	?ReadDataTo@TBinaryData@@QAEXPAXI@Z	; TBinaryData::ReadDataTo

; 268  : 	return s;

	mov	eax, DWORD PTR _s$[ebp]

; 269  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@operator:
	DD	1
	DD	$LN4@operator
$LN4@operator:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@operator
$LN3@operator:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
??5@YAAAVTBinaryData@@AAV0@AAVTUI64List@@@Z ENDP	; operator>>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ??6@YAAAVTBinaryData@@AAV0@AAVTUI64List@@@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_Value$ = 12						; size = 4
??6@YAAAVTBinaryData@@AAV0@AAVTUI64List@@@Z PROC	; operator<<, COMDAT

; 255  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 256  : 	s.WriteDataFrom((void *)&Value.size, sizeof(Value.size));

	push	4
	mov	eax, DWORD PTR _Value$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	call	?WriteDataFrom@TBinaryData@@QAEXPAXI@Z	; TBinaryData::WriteDataFrom

; 257  : 	s.WriteDataFrom((void *)Value.List, Value.size*sizeof(unsigned __int64));

	mov	eax, DWORD PTR _Value$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _Value$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	call	?WriteDataFrom@TBinaryData@@QAEXPAXI@Z	; TBinaryData::WriteDataFrom

; 258  : 	return s;

	mov	eax, DWORD PTR _s$[ebp]

; 259  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??6@YAAAVTBinaryData@@AAV0@AAVTUI64List@@@Z ENDP	; operator<<
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ??ATUI64List@@QAEAA_KI@Z
_TEXT	SEGMENT
$T1 = -209						; size = 1
_this$ = -8						; size = 4
_k$ = 8							; size = 4
??ATUI64List@@QAEAA_KI@Z PROC				; TUI64List::operator[], COMDAT
; _this$ = ecx

; 249  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 250  : 	if (k<size) return List[k];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN2@operator
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _k$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	jmp	SHORT $LN3@operator
$LN2@operator:

; 251  : 	throw CEBadIndex();

	push	OFFSET __TI1?AVCEBadIndex@TUI64List@@
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	__CxxThrowException@8
$LN3@operator:

; 252  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??ATUI64List@@QAEAA_KI@Z ENDP				; TUI64List::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ?Delete@TUI64List@@QAE_NI@Z
_TEXT	SEGMENT
tv81 = -244						; size = 4
$T1 = -236						; size = 4
$T2 = -224						; size = 4
_OldList$3 = -20					; size = 4
_this$ = -8						; size = 4
_index$ = 8						; size = 4
?Delete@TUI64List@@QAE_NI@Z PROC			; TUI64List::Delete, COMDAT
; _this$ = ecx

; 229  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 230  : 	if (index >= size) return false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN2@Delete
	xor	al, al
	jmp	$LN1@Delete
$LN2@Delete:

; 231  : 	if ((RealSize-__TUIList_BLSZ)>=size-1) // 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 30					; 0000001eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 1
	cmp	ecx, eax
	jb	$LN3@Delete

; 232  : 	{
; 233  : unsigned __int64 *OldList = List;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _OldList$3[ebp], ecx

; 234  : 		List = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 235  : 		RealSize = ((size-1)/__TUIList_BLSZ+((size-1)%__TUIList_BLSZ==0?0:1))*__TUIList_BLSZ;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	sub	eax, 1
	xor	edx, edx
	mov	ecx, 30					; 0000001eH
	div	ecx
	test	edx, edx
	jne	SHORT $LN5@Delete
	mov	DWORD PTR tv81[ebp], 0
	jmp	SHORT $LN6@Delete
$LN5@Delete:
	mov	DWORD PTR tv81[ebp], 1
$LN6@Delete:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 1
	xor	edx, edx
	mov	ecx, 30					; 0000001eH
	div	ecx
	add	eax, DWORD PTR tv81[ebp]
	imul	edx, eax, 30
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 236  : 		List = new unsigned __int64[RealSize];

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [eax], ecx

; 237  : 		memcpy(&List[0], &OldList[0], index*sizeof(unsigned __int64));

	mov	eax, DWORD PTR _index$[ebp]
	shl	eax, 3
	push	eax
	mov	ecx, 8
	imul	edx, ecx, 0
	add	edx, DWORD PTR _OldList$3[ebp]
	push	edx
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 238  : 		memcpy(&List[index], &OldList[index+1], (size-index-1)*sizeof(unsigned __int64));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _index$[ebp]
	lea	edx, DWORD PTR [ecx*8-8]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _OldList$3[ebp]
	lea	edx, DWORD PTR [ecx+eax*8+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 239  : 		delete[] OldList;

	mov	eax, DWORD PTR _OldList$3[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 240  : 		size--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 241  : 		return true;

	mov	al, 1
	jmp	SHORT $LN1@Delete
$LN3@Delete:

; 242  : 	}
; 243  : 	memcpy(&List[index], &List[index+1], (size-index-1)*sizeof(unsigned __int64));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _index$[ebp]
	lea	edx, DWORD PTR [ecx*8-8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _index$[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 244  : 	size--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 245  : 	return true;

	mov	al, 1
$LN1@Delete:

; 246  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Delete@TUI64List@@QAE_NI@Z ENDP			; TUI64List::Delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ?Add@TUI64List@@QAE_N_K@Z
_TEXT	SEGMENT
tv78 = -244						; size = 4
$T1 = -236						; size = 4
$T2 = -224						; size = 4
_OldList$3 = -20					; size = 4
_this$ = -8						; size = 4
_vl$ = 8						; size = 8
?Add@TUI64List@@QAE_N_K@Z PROC				; TUI64List::Add, COMDAT
; _this$ = ecx

; 213  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 214  : 	if (RealSize<size+1) // 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], ecx
	jae	$LN2@Add

; 215  : 	{
; 216  : unsigned __int64 *OldList = List;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _OldList$3[ebp], ecx

; 217  : 		List = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 218  : 		RealSize = ((size+1)/__TUIList_BLSZ+((size+1)%__TUIList_BLSZ==0?0:1))*__TUIList_BLSZ;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	add	eax, 1
	xor	edx, edx
	mov	ecx, 30					; 0000001eH
	div	ecx
	test	edx, edx
	jne	SHORT $LN4@Add
	mov	DWORD PTR tv78[ebp], 0
	jmp	SHORT $LN5@Add
$LN4@Add:
	mov	DWORD PTR tv78[ebp], 1
$LN5@Add:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	xor	edx, edx
	mov	ecx, 30					; 0000001eH
	div	ecx
	add	eax, DWORD PTR tv78[ebp]
	imul	edx, eax, 30
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 219  : 		List = new unsigned __int64[RealSize];

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [eax], ecx

; 220  : 		memcpy(List, OldList, size*sizeof(unsigned __int64));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _OldList$3[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 221  : 		delete[] OldList;

	mov	eax, DWORD PTR _OldList$3[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@Add:

; 222  : 	}
; 223  : 	List[size] = vl;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _vl$[ebp]
	mov	DWORD PTR [eax+ecx*8], edx
	mov	edx, DWORD PTR _vl$[ebp+4]
	mov	DWORD PTR [eax+ecx*8+4], edx

; 224  : 	size++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 225  : 	return true;

	mov	al, 1

; 226  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Add@TUI64List@@QAE_N_K@Z ENDP				; TUI64List::Add
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ??4TUI64List@@QAEXABV0@@Z
_TEXT	SEGMENT
$T1 = -224						; size = 4
$T2 = -212						; size = 4
_this$ = -8						; size = 4
_Value$ = 8						; size = 4
??4TUI64List@@QAEXABV0@@Z PROC				; TUI64List::operator=, COMDAT
; _this$ = ecx

; 186  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 187  : 	if (size!=Value.size)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Value$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	je	SHORT $LN2@operator

; 188  : 	{
; 189  : 		delete[] List;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 190  : 		size = Value.size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Value$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 191  : 		RealSize = Value.RealSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Value$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 192  : 		List = new unsigned __int64[size];

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [eax], ecx
$LN2@operator:

; 193  : 	};
; 194  : 	memcpy(List, Value.List, size*sizeof(unsigned __int64));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _Value$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 195  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4TUI64List@@QAEXABV0@@Z ENDP				; TUI64List::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ?ValueInList@TUI64List@@QBE_N_K@Z
_TEXT	SEGMENT
tv78 = -224						; size = 4
tv77 = -220						; size = 4
_i$1 = -20						; size = 4
_this$ = -8						; size = 4
_k$ = 8							; size = 8
?ValueInList@TUI64List@@QBE_N_K@Z PROC			; TUI64List::ValueInList, COMDAT
; _this$ = ecx

; 206  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 207  : 	for (unsigned __int32 i=0; i<size; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@ValueInLis
$LN2@ValueInLis:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@ValueInLis:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN3@ValueInLis

; 208  : 		if (List[i] == k) return true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$1[ebp]
	mov	DWORD PTR tv77[ebp], ecx
	mov	DWORD PTR tv78[ebp], edx
	mov	eax, DWORD PTR tv78[ebp]
	mov	ecx, DWORD PTR tv77[ebp]
	mov	edx, DWORD PTR [ecx+eax*8]
	cmp	edx, DWORD PTR _k$[ebp]
	jne	SHORT $LN5@ValueInLis
	mov	eax, DWORD PTR tv78[ebp]
	mov	ecx, DWORD PTR tv77[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+4]
	cmp	edx, DWORD PTR _k$[ebp+4]
	jne	SHORT $LN5@ValueInLis
	mov	al, 1
	jmp	SHORT $LN1@ValueInLis
$LN5@ValueInLis:

; 209  : 	return false;

	jmp	SHORT $LN2@ValueInLis
$LN3@ValueInLis:
	xor	al, al
$LN1@ValueInLis:

; 210  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?ValueInList@TUI64List@@QBE_N_K@Z ENDP			; TUI64List::ValueInList
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ?Reset@TUI64List@@QAEXXZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
?Reset@TUI64List@@QAEXXZ PROC				; TUI64List::Reset, COMDAT
; _this$ = ecx

; 198  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 199  : 	delete[] List;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 200  : 	List = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 201  : 	size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 202  : 	RealSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 203  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@TUI64List@@QAEXXZ ENDP				; TUI64List::Reset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ?GetSize@TUI64List@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetSize@TUI64List@@QBEIXZ PROC				; TUI64List::GetSize, COMDAT
; _this$ = ecx

; 181  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	return size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 183  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSize@TUI64List@@QBEIXZ ENDP				; TUI64List::GetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ?SetSize@TUI64List@@QAE_NI@Z
_TEXT	SEGMENT
$T1 = -224						; size = 4
$T2 = -212						; size = 4
_this$ = -8						; size = 4
_k$ = 8							; size = 4
?SetSize@TUI64List@@QAE_NI@Z PROC			; TUI64List::SetSize, COMDAT
; _this$ = ecx

; 170  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 171  : 	delete[] List;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 172  : 	List = new unsigned __int64[k];

	xor	ecx, ecx
	mov	eax, DWORD PTR _k$[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [eax], ecx

; 173  : 	if (List==NULL) return false;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN2@SetSize
	xor	al, al
	jmp	SHORT $LN1@SetSize
$LN2@SetSize:

; 174  : 	memset(List, 0, k*sizeof(unsigned __int64));

	mov	eax, DWORD PTR _k$[ebp]
	shl	eax, 3
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 175  : 	size = k;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 176  : 	RealSize = k;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 177  : 	return true;

	mov	al, 1
$LN1@SetSize:

; 178  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSize@TUI64List@@QAE_NI@Z ENDP			; TUI64List::SetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ??1TUI64List@@QAE@XZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
??1TUI64List@@QAE@XZ PROC				; TUI64List::~TUI64List, COMDAT
; _this$ = ecx

; 165  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 166  : 	delete[] List;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 167  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1TUI64List@@QAE@XZ ENDP				; TUI64List::~TUI64List
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ??0TUI64List@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0TUI64List@@QAE@XZ PROC				; TUI64List::TUI64List, COMDAT
; _this$ = ecx

; 157  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 158  : 	List = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 159  : 	size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 160  : 	RealSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 161  : //	cout << "TUI64List=" << this << "-" << (void*)(((char*)this)+sizeof(*this))<< endl;
; 162  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0TUI64List@@QAE@XZ ENDP				; TUI64List::TUI64List
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ??ATUIAutoSizeList@@QAEAAII@Z
_TEXT	SEGMENT
tv129 = -244						; size = 4
$T1 = -236						; size = 4
$T2 = -224						; size = 4
_OldList$ = -20						; size = 4
_this$ = -8						; size = 4
_k$ = 8							; size = 4
??ATUIAutoSizeList@@QAEAAII@Z PROC			; TUIAutoSizeList::operator[], COMDAT
; _this$ = ecx

; 142  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 143  : 	if (k<size) return List[k];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN2@operator
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _k$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	jmp	$LN1@operator
$LN2@operator:

; 144  : unsigned __int32 *OldList = List;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _OldList$[ebp], ecx

; 145  : 	List = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 146  : 	RealSize = ((k+1)/__TUIList_BLSZ+((k+1)%__TUIList_BLSZ==0?0:1))*__TUIList_BLSZ;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	xor	edx, edx
	mov	ecx, 30					; 0000001eH
	div	ecx
	test	edx, edx
	jne	SHORT $LN4@operator
	mov	DWORD PTR tv129[ebp], 0
	jmp	SHORT $LN5@operator
$LN4@operator:
	mov	DWORD PTR tv129[ebp], 1
$LN5@operator:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	xor	edx, edx
	mov	ecx, 30					; 0000001eH
	div	ecx
	add	eax, DWORD PTR tv129[ebp]
	imul	edx, eax, 30
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 147  : 	List = new unsigned __int32[RealSize];

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [eax], ecx

; 148  : 	memcpy(&List[0], &OldList[0], size*sizeof(unsigned __int32));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 2
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _OldList$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 149  : 	delete[] OldList;

	mov	eax, DWORD PTR _OldList$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 150  : 	memset(&List[size], 0, (k-size)*sizeof(unsigned __int32));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, DWORD PTR [eax+4]
	shl	ecx, 2
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [edx+eax*4]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 151  : 	size=k+1;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 152  : 	return List[k];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _k$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
$LN1@operator:

; 153  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??ATUIAutoSizeList@@QAEAAII@Z ENDP			; TUIAutoSizeList::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ?pr@TUIList@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?pr@TUIList@@QAEXXZ PROC				; TUIList::pr, COMDAT
; _this$ = ecx

; 134  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 135  : //	cout << (unsigned)size << ":" << (unsigned)RealSize << "  ";
; 136  : //	for (int i=0; i<RealSize; i++)
; 137  : //		cout << (unsigned)List[i] << " ";
; 138  : //	cout << endl;
; 139  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?pr@TUIList@@QAEXXZ ENDP				; TUIList::pr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ??5@YAAAVTBinaryData@@AAV0@AAVTUIList@@@Z
_TEXT	SEGMENT
_size$ = -8						; size = 4
_s$ = 8							; size = 4
_Value$ = 12						; size = 4
??5@YAAAVTBinaryData@@AAV0@AAVTUIList@@@Z PROC		; operator>>, COMDAT

; 124  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 125  : 	Value.Reset();

	mov	ecx, DWORD PTR _Value$[ebp]
	call	?Reset@TUIList@@QAEXXZ			; TUIList::Reset

; 126  : unsigned __int32 size;
; 127  : 	s.ReadDataTo((void *)&size, sizeof(unsigned int));

	push	4
	lea	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	call	?ReadDataTo@TBinaryData@@QAEXPAXI@Z	; TBinaryData::ReadDataTo

; 128  : 	Value.SetSize(size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Value$[ebp]
	call	?SetSize@TUIList@@QAE_NI@Z		; TUIList::SetSize

; 129  : 	s.ReadDataTo((void *)Value.List, Value.size*sizeof(unsigned __int32));

	mov	eax, DWORD PTR _Value$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _Value$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	call	?ReadDataTo@TBinaryData@@QAEXPAXI@Z	; TBinaryData::ReadDataTo

; 130  : 	return s;

	mov	eax, DWORD PTR _s$[ebp]

; 131  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@operator:
	DD	1
	DD	$LN4@operator
$LN4@operator:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@operator
$LN3@operator:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
??5@YAAAVTBinaryData@@AAV0@AAVTUIList@@@Z ENDP		; operator>>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ??6@YAAAVTBinaryData@@AAV0@AAVTUIList@@@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_Value$ = 12						; size = 4
??6@YAAAVTBinaryData@@AAV0@AAVTUIList@@@Z PROC		; operator<<, COMDAT

; 117  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 118  : 	s.WriteDataFrom((void *)&Value.size, sizeof(Value.size));

	push	4
	mov	eax, DWORD PTR _Value$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	call	?WriteDataFrom@TBinaryData@@QAEXPAXI@Z	; TBinaryData::WriteDataFrom

; 119  : 	s.WriteDataFrom((void *)Value.List, Value.size*sizeof(unsigned __int32));

	mov	eax, DWORD PTR _Value$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _Value$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	call	?WriteDataFrom@TBinaryData@@QAEXPAXI@Z	; TBinaryData::WriteDataFrom

; 120  : 	return s;

	mov	eax, DWORD PTR _s$[ebp]

; 121  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??6@YAAAVTBinaryData@@AAV0@AAVTUIList@@@Z ENDP		; operator<<
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ??ATUIList@@QAEAAII@Z
_TEXT	SEGMENT
$T1 = -209						; size = 1
_this$ = -8						; size = 4
_k$ = 8							; size = 4
??ATUIList@@QAEAAII@Z PROC				; TUIList::operator[], COMDAT
; _this$ = ecx

; 111  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 112  : 	if (k<size) return List[k];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN2@operator
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _k$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	jmp	SHORT $LN3@operator
$LN2@operator:

; 113  : 	throw CEBadIndex();

	push	OFFSET __TI1?AVCEBadIndex@TUIList@@
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	__CxxThrowException@8
$LN3@operator:

; 114  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??ATUIList@@QAEAAII@Z ENDP				; TUIList::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ?GetIndexFor@TUIList@@QAEHI@Z
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_this$ = -8						; size = 4
_Value$ = 8						; size = 4
?GetIndexFor@TUIList@@QAEHI@Z PROC			; TUIList::GetIndexFor, COMDAT
; _this$ = ecx

; 68   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 	for (int i=0; i<size; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@GetIndexFo
$LN2@GetIndexFo:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@GetIndexFo:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN3@GetIndexFo

; 70   : 		if (List[i] == Value) return i;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	cmp	eax, DWORD PTR _Value$[ebp]
	jne	SHORT $LN5@GetIndexFo
	mov	eax, DWORD PTR _i$1[ebp]
	jmp	SHORT $LN1@GetIndexFo
$LN5@GetIndexFo:

; 71   : 	return -1;

	jmp	SHORT $LN2@GetIndexFo
$LN3@GetIndexFo:
	or	eax, -1
$LN1@GetIndexFo:

; 72   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetIndexFor@TUIList@@QAEHI@Z ENDP			; TUIList::GetIndexFor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ?Delete@TUIList@@QAE_NI@Z
_TEXT	SEGMENT
tv81 = -244						; size = 4
$T1 = -236						; size = 4
$T2 = -224						; size = 4
_OldList$3 = -20					; size = 4
_this$ = -8						; size = 4
_index$ = 8						; size = 4
?Delete@TUIList@@QAE_NI@Z PROC				; TUIList::Delete, COMDAT
; _this$ = ecx

; 91   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 92   : 	if (index >= size) return false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN2@Delete
	xor	al, al
	jmp	$LN1@Delete
$LN2@Delete:

; 93   : 	if ((RealSize-__TUIList_BLSZ)>=size-1) // 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 30					; 0000001eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 1
	cmp	ecx, eax
	jb	$LN3@Delete

; 94   : 	{
; 95   : unsigned __int32 *OldList = List;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _OldList$3[ebp], ecx

; 96   : 		List = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 97   : 		RealSize = ((size-1)/__TUIList_BLSZ+((size-1)%__TUIList_BLSZ==0?0:1))*__TUIList_BLSZ;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	sub	eax, 1
	xor	edx, edx
	mov	ecx, 30					; 0000001eH
	div	ecx
	test	edx, edx
	jne	SHORT $LN5@Delete
	mov	DWORD PTR tv81[ebp], 0
	jmp	SHORT $LN6@Delete
$LN5@Delete:
	mov	DWORD PTR tv81[ebp], 1
$LN6@Delete:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 1
	xor	edx, edx
	mov	ecx, 30					; 0000001eH
	div	ecx
	add	eax, DWORD PTR tv81[ebp]
	imul	edx, eax, 30
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 98   : 		List = new unsigned __int32[RealSize];

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [eax], ecx

; 99   : 		memcpy(&List[0], &OldList[0], index*sizeof(unsigned __int32));

	mov	eax, DWORD PTR _index$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	add	edx, DWORD PTR _OldList$3[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 100  : 		memcpy(&List[index], &OldList[index+1], (size-index-1)*sizeof(unsigned __int32));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _index$[ebp]
	lea	edx, DWORD PTR [ecx*4-4]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _OldList$3[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 101  : 		delete[] OldList;

	mov	eax, DWORD PTR _OldList$3[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 102  : 		size--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 103  : 		return true;

	mov	al, 1
	jmp	SHORT $LN1@Delete
$LN3@Delete:

; 104  : 	}
; 105  : 	memcpy(&List[index], &List[index+1], (size-index-1)*sizeof(unsigned __int32));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _index$[ebp]
	lea	edx, DWORD PTR [ecx*4-4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _index$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 106  : 	size--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 107  : 	return true;

	mov	al, 1
$LN1@Delete:

; 108  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Delete@TUIList@@QAE_NI@Z ENDP				; TUIList::Delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ?Add@TUIList@@QAE_NI@Z
_TEXT	SEGMENT
tv78 = -244						; size = 4
$T1 = -236						; size = 4
$T2 = -224						; size = 4
_OldList$3 = -20					; size = 4
_this$ = -8						; size = 4
_vl$ = 8						; size = 4
?Add@TUIList@@QAE_NI@Z PROC				; TUIList::Add, COMDAT
; _this$ = ecx

; 75   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 76   : 	if (RealSize<size+1) // 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], ecx
	jae	$LN2@Add

; 77   : 	{
; 78   : unsigned __int32 *OldList = List;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _OldList$3[ebp], ecx

; 79   : 		List = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 80   : 		RealSize = ((size+1)/__TUIList_BLSZ+((size+1)%__TUIList_BLSZ==0?0:1))*__TUIList_BLSZ;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	add	eax, 1
	xor	edx, edx
	mov	ecx, 30					; 0000001eH
	div	ecx
	test	edx, edx
	jne	SHORT $LN4@Add
	mov	DWORD PTR tv78[ebp], 0
	jmp	SHORT $LN5@Add
$LN4@Add:
	mov	DWORD PTR tv78[ebp], 1
$LN5@Add:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	xor	edx, edx
	mov	ecx, 30					; 0000001eH
	div	ecx
	add	eax, DWORD PTR tv78[ebp]
	imul	edx, eax, 30
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 81   : 		List = new unsigned __int32[RealSize];

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [eax], ecx

; 82   : 		memcpy(List, OldList, size*sizeof(unsigned __int32));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _OldList$3[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 83   : 		delete[] OldList;

	mov	eax, DWORD PTR _OldList$3[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@Add:

; 84   : 	}
; 85   : 	List[size] = vl;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _vl$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx

; 86   : 	size++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 87   : 	return true;

	mov	al, 1

; 88   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@TUIList@@QAE_NI@Z ENDP				; TUIList::Add
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ??4TUIList@@QAEXABV0@@Z
_TEXT	SEGMENT
$T1 = -224						; size = 4
$T2 = -212						; size = 4
_this$ = -8						; size = 4
_Value$ = 8						; size = 4
??4TUIList@@QAEXABV0@@Z PROC				; TUIList::operator=, COMDAT
; _this$ = ecx

; 41   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 42   : 	if (size!=Value.size)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Value$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	je	SHORT $LN2@operator

; 43   : 	{
; 44   : 		delete[] List;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 45   : 		size = Value.size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Value$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 46   : 		RealSize = Value.RealSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Value$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 47   : 		List = new unsigned __int32[size];

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [eax], ecx
$LN2@operator:

; 48   : 	};
; 49   : 	memcpy(List, Value.List, size*sizeof(unsigned __int32));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _Value$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 50   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4TUIList@@QAEXABV0@@Z ENDP				; TUIList::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ?ValueInList@TUIList@@QBE_NI@Z
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_this$ = -8						; size = 4
_k$ = 8							; size = 4
?ValueInList@TUIList@@QBE_NI@Z PROC			; TUIList::ValueInList, COMDAT
; _this$ = ecx

; 61   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 	for (unsigned __int32 i=0; i<size; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@ValueInLis
$LN2@ValueInLis:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@ValueInLis:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN3@ValueInLis

; 63   : 		if (List[i] == k) return true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	cmp	eax, DWORD PTR _k$[ebp]
	jne	SHORT $LN5@ValueInLis
	mov	al, 1
	jmp	SHORT $LN1@ValueInLis
$LN5@ValueInLis:

; 64   : 	return false;

	jmp	SHORT $LN2@ValueInLis
$LN3@ValueInLis:
	xor	al, al
$LN1@ValueInLis:

; 65   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ValueInList@TUIList@@QBE_NI@Z ENDP			; TUIList::ValueInList
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ?Reset@TUIList@@QAEXXZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
?Reset@TUIList@@QAEXXZ PROC				; TUIList::Reset, COMDAT
; _this$ = ecx

; 53   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 54   : 	delete[] List;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 55   : 	List = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 56   : 	size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 57   : 	RealSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 58   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@TUIList@@QAEXXZ ENDP				; TUIList::Reset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ?GetSize@TUIList@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetSize@TUIList@@QBEIXZ PROC				; TUIList::GetSize, COMDAT
; _this$ = ecx

; 36   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 37   : 	return size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 38   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSize@TUIList@@QBEIXZ ENDP				; TUIList::GetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ?SetSize@TUIList@@QAE_NI@Z
_TEXT	SEGMENT
$T1 = -224						; size = 4
$T2 = -212						; size = 4
_this$ = -8						; size = 4
_k$ = 8							; size = 4
?SetSize@TUIList@@QAE_NI@Z PROC				; TUIList::SetSize, COMDAT
; _this$ = ecx

; 25   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 26   : 	delete[] List;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 27   : 	List = new unsigned __int32[k];

	xor	ecx, ecx
	mov	eax, DWORD PTR _k$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [eax], ecx

; 28   : 	if (List==NULL) return false;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN2@SetSize
	xor	al, al
	jmp	SHORT $LN1@SetSize
$LN2@SetSize:

; 29   : 	memset(List, 0, k*sizeof(unsigned __int32));

	mov	eax, DWORD PTR _k$[ebp]
	shl	eax, 2
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 30   : 	size = k;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 31   : 	RealSize = k;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 32   : 	return true;

	mov	al, 1
$LN1@SetSize:

; 33   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSize@TUIList@@QAE_NI@Z ENDP				; TUIList::SetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ??1TUIList@@QAE@XZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
??1TUIList@@QAE@XZ PROC					; TUIList::~TUIList, COMDAT
; _this$ = ecx

; 20   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 21   : 	delete[] List;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 22   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1TUIList@@QAE@XZ ENDP					; TUIList::~TUIList
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ??0TUIList@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0TUIList@@QAE@XZ PROC					; TUIList::TUIList, COMDAT
; _this$ = ecx

; 13   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 14   : 	List = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 15   : 	size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 16   : 	RealSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 17   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0TUIList@@QAE@XZ ENDP					; TUIList::TUIList
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\smith\projects\callcenter\tuilist.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
